<?xml version="1.0"?>
<doc>
    <assembly>
        <name>51Sole.DJG</name>
    </assembly>
    <members>
        <member name="T:_51Sole.DJG.Common.AES">
            <summary>
            AES加密解密
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.Encrypt(System.String,System.String)">
            <summary>
            支持中文密钥的AES ECB PKCS7方式加密（由于PHP只支持16位长度的密钥，因此本方法和PHP不兼容）
            </summary>
            <param name="strEncrypt">要加密的内容</param>
            <param name="strKey">密钥</param>
            <returns>加密后的密文</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.Decrypt(System.String,System.String)">
            <summary>
            支持中文密钥的AES ECB PKCS7方式解密方法（由于PHP只支持16位长度的密钥，因此本方法和PHP不兼容）
            </summary>
            <param name="strDecrypt">待解密的密文</param>
            <param name="strKey">密钥</param>
            <returns>解密后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.EncryptBySHA1(System.String,System.String)">
            <summary>
            SHA1方式的AES加密，返回16进制结果 ECB PKCS7
            </summary>
            <param name="toEncrypt">待加密的内容</param>
            <param name="key">密钥</param>
            <returns>16进制加密结果</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.DecryptBySHA1(System.String,System.String)">
            <summary>
            SHA1方式的AES解密（针对16进制加密结果） ECB PKCS7
            </summary>
            <param name="toDecrypt">待解密的密文</param>
            <param name="key">密钥</param>
            <returns>解密结果</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.EncryptBySHA1_Base64(System.String,System.String)">
            <summary>
            SHA1方式的AES加密，返回结果Base64编码 ECB PKCS7
            </summary>
            <param name="toEncrypt">待加密的内容</param>
            <param name="key">密钥</param>
            <returns>Base64编码的加密结果</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.DecryptBySHA1_Base64(System.String,System.String)">
            <summary>
            SHA1方式的AES解密，返回结果Base64编码 ECB PKCS7
            </summary>
            <param name="toDecrypt">待解密的密文</param>
            <param name="key">密钥</param>
            <returns>解密结果</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.Encrypt(System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            AES加密，使用16位长度密钥
            </summary>
            <param name="strEncrypt">要加密的字符串</param>
            <param name="strKey">16位长度的密钥</param>
            <param name="mode">Mode</param>
            <param name="padding">Padding</param>
            <returns>加密后的密文</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.Decrypt(System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            AES解密方法，使用16位长度密钥
            </summary>
            <param name="strDecrypt">待解密的密文</param>
            <param name="strKey">16位长度的密钥</param>
            <param name="mode">Mode</param>
            <param name="padding">Padding</param>
            <returns>解密后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.Encrypt(System.String,System.String,System.String)">
            <summary>
            AES加密[CBC模式]，带向量IV
            </summary>
            <param name="toEncrypt"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.Decrypt(System.String,System.String,System.String)">
            <summary>
            AES解密[CBC模式]，带向量IV
            </summary>
            <param name="toDecrypt"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.EncryptECB(System.String,System.String)">
            <summary>
            AES ECB Zeros方式加密，使用16位长度密钥
            </summary>
            <param name="strEncrypt">要加密的字符串</param>
            <param name="strKey">16位长度的密钥</param>
            <returns>加密后的密文</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.DecryptECB(System.String,System.String)">
            <summary>
            AES ECB Zeros方式加密的解密方法
            </summary>
            <param name="strDecrypt">待解密的密文</param>
            <param name="strKey">16位长度的密钥</param>
            <returns>解密后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.EncryptStr(System.String)">
            <summary>
            AES加密
            </summary>
            <param name="SourceString"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.EncryptStrForUrl(System.String)">
            <summary>
            取得用于URL传输的AES加密结果
            </summary>
            <param name="SourceString"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.EncryptStr(System.String,System.Boolean)">
            <summary>
            AES加密
            该方法已废弃，不再建议使用！用于URL传输时推荐使用新的EncryptStrForUrl()方法，并使用DecryptStrForUrl()方法进行解密
            </summary>
            <param name="SourceString">要加密的字符串</param>
            <param name="UseInUrl">加密结果是否直接用于Url传输。true时，加密结果可以直接用于Url中传输</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.DecryptStr(System.String)">
            <summary>
            AES解密
            </summary>
            <param name="EncryptString">要解密的字符串</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.DecryptStrForUrl(System.String)">
            <summary>
            对用于URL传输的AES加密结果进行解密
            </summary>
            <param name="EncryptString">要解密的字符串</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.EncryptStrByCBC(System.String)">
            <summary>
            AES加密
            </summary>
            <param name="SourceString"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.EncryptStrByCBC(System.String,System.Boolean)">
            <summary>
            AES加密
            </summary>
            <param name="SourceString">要加密的字符串</param>
            <param name="UseInUrl">加密结果是否直接用于Url传输。true时，加密结果可以直接用于Url中传输</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AES.DecryptStrByCBC(System.String)">
            <summary>
            AES解密
            </summary>
            <param name="EncryptString">要解密的字符串</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="T:_51Sole.DJG.Common.AZDG">
            <summary>
            AES加密解密
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.AZDG.Encrypt(System.String,System.String)">
            <summary>
            短信发送AZDG加密算法
            </summary>
            <param name="txt">加密字符串</param>
            <param name="key">私有密钥</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AZDG.Decrypt(System.String,System.String)">
            <summary>
            AZDG 解密函数
            </summary>
            <param name="txt">加密后的字串</param>
            <param name="key">私有密匙(用于解密和加密)</param>
            <returns>字串经过私有密匙解密后的结果</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.AZDG.GetKey(System.String,System.String)">
            <summary>
            AZDG 密匙处理函数
            </summary>
            <param name="txt">待加密或待解密的字串</param>
            <param name="encrypt_key">私有密匙(用于解密和加密)</param>
            <returns>处理后的密匙</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.CacheHelper.GetCache(System.String)">
            <summary>
            获取当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey"></param>
            <returns></returns>y
        </member>
        <member name="M:_51Sole.DJG.Common.CacheHelper.SetCache(System.String,System.Object)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey"></param>
            <param name="objObject"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CacheHelper.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey"></param>
            <param name="objObject"></param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CacheHelper.RemoveKeyCache(System.String)">
            <summary>
            清除单一键缓存
            </summary>
            <param name="CacheKey"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CacheHelper.RemoveAllCache">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.CacheHelper.ShowAllCache">
            <summary>
            以列表形式返回已存在的所有缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.ChineseDate">
            <summary>
            农历日期类
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ChineseDate.ChineseCalendar">
            <summary>
             实例化一个 ChineseLunisolarCalendar
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ChineseDate.tg">
            <summary>
             十天干
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ChineseDate.dz">
            <summary>
             十二地支
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ChineseDate.sx">
            <summary>
             十二生肖
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ChineseDate.months">
            <summary>
             农历月
            </summary>
            <returns></returns>
        </member>
        <member name="F:_51Sole.DJG.Common.ChineseDate.days1">
            <summary>
             农历日
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ChineseDate.days">
            <summary>
             农历日
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.ChineseDate.GetLunisolarYear(System.Int32,System.Boolean)">
            <summary>
            返回农历天干地支年
            </summary>
            <param name="year">农历年</param>
            <param name="shengXiao">返回的结果是否包含生肖</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.ChineseDate.GetLunisolarMonth(System.Int32)">
            <summary>
             返回农历月
            </summary>
            <param name="month">月份</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.ChineseDate.GetLunisolarDay(System.Int32)">
            <summary>
             返回农历日
            </summary>
            <param name="day">天</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.ChineseDate.GetShengXiao(System.Int32)">
            <summary>
            返回生肖
            </summary>
            <param name="year">农历年</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.ChineseDate.GetChineseBirthday(System.DateTime)">
            <summary>
            根本公历日期取得农历生日
            </summary>
            <param name="datetime">公历日期</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.ChineseDate.GetChineseDateTime(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
             根据公历获取农历日期
             传入日期：2010-3-4
             返回农历：庚寅[虎]年正月十九
            </summary>
            <param name="datetime">公历日期</param>
            <param name="monthDayOlny">返回结果仅包含月和日（用于取农历生日）</param>
            <param name="shengXiao">返回结果是否包含生肖</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.ChineseDate.BindChineseMonth(System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList)">
            <summary>
            绑定农历月日下拉列表数据
            </summary>
            <param name="ddlChineseMonth">要填充月份的DropDownList对象</param>
            <param name="ddlChineseDay">要填充日数的DropDownList对象</param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.GetCookieValue(System.String)">
            <summary>
            获得Cookie的值
            </summary>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.GetCookieValue(System.String,System.String)">
            <summary>
            获得Cookie的值
            </summary>
            <param name="cookieName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.GetCookieValue(System.Web.HttpCookie,System.String)">
            <summary>
            获得Cookie的子键值
            </summary>
            <param name="cookie"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.GetCookie(System.String)">
            <summary>
            获得Cookie
            </summary>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.RemoveCookie(System.String)">
            <summary>
            删除Cookie
            </summary>
            <param name="cookieName"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.RemoveCookie(System.String,System.String)">
            <summary>
            删除Cookie的子键
            </summary>
            <param name="cookieName"></param>
            <param name="key"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.SetCookie(System.String,System.String,System.String)">
            <summary>
            设置Cookie子键的值
            </summary>
            <param name="cookieName"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.SetCookie(System.String,System.String,System.String,System.String)">
            <summary>
            设置Cookie子键的值
            </summary>
            <param name="cookieName"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="Domain">Cookies域</param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.SetCookie(System.String,System.String)">
            <summary>
            设置Cookie值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.SetDomainCookie(System.String,System.String,System.String)">
            <summary>
            设置Cookie值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="Domain">Cookies域</param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.SetCookie(System.String,System.String,System.Boolean,System.String)">
            <summary>
            设置Cookie值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="withDomain"></param>
            <param name="Domain">Cookies域</param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.SetCookie(System.String,System.String,System.DateTime)">
            <summary>
            设置Cookie值和过期时间
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.SetCookie(System.String,System.String,System.DateTime,System.String)">
            <summary>
            设置Cookie值和过期时间
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires"></param>
            <param name="Domain">Cookies域</param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.SetCookie(System.String,System.DateTime)">
            <summary>
            设置Cookie过期时间
            </summary>
            <param name="cookieName"></param>
            <param name="expires"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.SetCookie(System.String,System.DateTime,System.String)">
            <summary>
            设置Cookie过期时间
            </summary>
            <param name="cookieName"></param>
            <param name="expires"></param>
            <param name="Domain">Cookies域</param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.SetCookie(System.String,System.String,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            设置Cookie
            </summary>
            <param name="cookieName"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires"></param>
            <param name="Domain">Cookies域</param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.AddCookie(System.String,System.String)">
            <summary>
            添加Cookie
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.AddDomainCookie(System.String,System.String,System.String)">
            <summary>
            添加Cookie
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="Domain"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.AddCookie(System.String,System.String,System.Boolean,System.String)">
            <summary>
            添加Cookie
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="withDomain"></param>
            <param name="Domain"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.AddCookie(System.String,System.String,System.DateTime)">
            <summary>
            添加Cookie
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.AddCookie(System.String,System.String,System.DateTime,System.String)">
            <summary>
            添加Cookie
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires"></param>
            <param name="Domain">Cookies域</param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.AddCookie(System.String,System.String,System.String)">
            <summary>
            添加为Cookie.Values集合
            </summary>
            <param name="cookieName"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.AddCookie(System.String,System.String,System.String,System.String)">
            <summary>
            添加为Cookie.Values集合
            </summary>
            <param name="cookieName"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="Domain">Cookies域</param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.AddCookie(System.String,System.DateTime)">
            <summary>
            添加为Cookie集合
            </summary>
            <param name="cookieName">Cookie名称</param>
            <param name="expires">过期时间</param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.AddCookie(System.String,System.DateTime,System.String)">
            <summary>
            添加为Cookie集合
            </summary>
            <param name="cookieName">Cookie名称</param>
            <param name="expires">过期时间</param>
            <param name="Domain">Cookies域</param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.AddCookie(System.String,System.String,System.String,System.DateTime)">
            <summary>
            添加为Cookie.Values集合
            </summary>
            <param name="cookieName"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.AddCookie(System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            添加为Cookie.Values集合
            </summary>
            <param name="cookieName"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires"></param>
            <param name="Domain">Cookies域</param>
        </member>
        <member name="M:_51Sole.DJG.Common.CookiesHelper.AddCookie(System.Web.HttpCookie,System.String)">
            <summary>
            添加Cookie
            </summary>
            <param name="cookie"></param>
            <param name="Domain">Cookies域</param>
        </member>
        <member name="T:_51Sole.DJG.Common.Cryptography">
            <summary>
            加密类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Cryptography.MD5(System.String,System.Int32)">
            <summary>
            MD5 加密静态方法
            </summary>
            <param name="EncryptString">待加密的密文</param>
            <param name="codeLength">加密后的长度</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Cryptography.DESEncrypt(System.String,System.String)">
            <summary>
            DES 加密(数据加密标准，速度较快，适用于加密大量数据的场合)
            </summary>
            <param name="EncryptString">待加密的密文</param>
            <param name="EncryptKey">加密的密钥</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Cryptography.DESDecrypt(System.String,System.String)">
            <summary>
            DES 解密(数据加密标准，速度较快，适用于加密大量数据的场合)
            </summary>
            <param name="DecryptString">待解密的密文</param>
            <param name="DecryptKey">解密的密钥</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Cryptography.DES3Encrypt(System.String,System.String,System.String,System.String)">
            <summary>
            3DES 加密(基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高)
            </summary>
            <param name="EncryptString">待加密密文</param>
            <param name="EncryptKey1">密钥一</param>
            <param name="EncryptKey2">密钥二</param>
            <param name="EncryptKey3">密钥三</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Cryptography.DES3Decrypt(System.String,System.String,System.String,System.String)">
            <summary>
            3DES 解密(基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高)
            </summary>
            <param name="DecryptString">待解密密文</param>
            <param name="DecryptKey1">密钥一</param>
            <param name="DecryptKey2">密钥二</param>
            <param name="DecryptKey3">密钥三</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Cryptography.RC2Encrypt(System.String,System.String)">
            <summary>
            RC2 加密(用变长密钥对大量数据进行加密)
            </summary>
            <param name="EncryptString">待加密密文</param>
            <param name="EncryptKey">加密密钥</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Cryptography.RC2Decrypt(System.String,System.String)">
            <summary>
            RC2 解密(用变长密钥对大量数据进行加密)
            </summary>
            <param name="DecryptString">待解密密文</param>
            <param name="DecryptKey">解密密钥</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Cryptography.AESEncrypt(System.String,System.String)">
            <summary>
            AES 加密(高级加密标准，是下一代的加密算法标准，速度快，安全级别高，
            目前 AES 标准的一个实现是 Rijndael 算法)
            </summary>
            <param name="EncryptString">待加密密文</param>
            <param name="EncryptKey">加密密钥</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Cryptography.AESDecrypt(System.String,System.String)">
            <summary>
            AES 解密(高级加密标准，是下一代的加密算法标准，速度快，
            安全级别高，目前 AES 标准的一个实现是 Rijndael 算法)
            </summary>
            <param name="DecryptString">待解密密文</param>
            <param name="DecryptKey">解密密钥</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.CSVHelper.CsvToDataTable(System.String,System.Boolean)">
            <summary>
            将csv文件的数据转成datatable
            </summary>
            <param name="csvfilePath">csv文件路径</param>
            <param name="firstIsRowHead">是否将第一行作为字段名</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.CSVHelper.ToDataTable(System.String,System.Boolean)">
            <summary>
            将CSV数据转换为DataTable
            </summary>
            <param name="csv">包含以","分隔的CSV数据的字符串</param>
            <param name="isRowHead">是否将第一行作为字段名</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.CSVHelper.FromCsvLine(System.String)">
            <summary>
            解析一行CSV数据
            </summary>
            <param name="csv">csv数据行</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.CSVHelper.Reverse(System.String)">
            <summary>
            反转字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.CSVHelper.ReplaceQuote(System.String)">
            <summary>
            替换CSV中的双引号转义符为正常双引号,并去掉左右双引号
            </summary>
            <param name="csvValue">csv格式的数据</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dh.GetDistinctTable(System.Data.DataTable,System.String[])">
            <summary>
            DataTable去重
            </summary>
            <param name="dtSource">需要去重的DataTable</param>
            <param name="columnNames">依据哪些列去重，如：new string[]{"CompanyID"}</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dh.GetDistinctTable(System.Data.DataTable)">
            <summary>
            DataTable去重
            </summary>
            <param name="dtSource">需要去重的DataTable</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dh.GetTableColumnName(System.Data.DataTable)">
            <summary>
            获取表中所有列名
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dh.CombineTables(System.Data.DataSet,System.Data.DataTable,System.Data.DataTable)">
            <summary>
            两个相同字段表的合并
            </summary>
            <param name="_ds"></param>
            <param name="_dt1"></param>
            <param name="_dt2"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dh.CopyScopeRows(System.Data.DataSet,System.Int32,System.Int32)">
            <summary>
            对表的数据截取
            </summary>
            <param name="source"></param>
            <param name="startRowNum"></param>
            <param name="endRowNum"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dh.CopyScopeRows(System.Data.DataSet,System.String)">
            <summary>
            数据行的筛选
            </summary>
            <param name="source"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dh.CopyScopeRows(System.Data.DataSet,System.String,System.String)">
            <summary>
            数据行的筛选，并可以排序
            </summary>
            <param name="source"></param>
            <param name="filter"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dh.CopyScopeRows(System.Data.DataSet,System.String,System.Int32,System.Int32)">
            <summary>
            数据行的筛选，并可截取数据行
            </summary>
            <param name="source"></param>
            <param name="filter"></param>
            <param name="startRowNum"></param>
            <param name="endRowNum"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dh.CopyScopeRows(System.Data.DataSet,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            数据行的筛选、排序，并可截取数据行
            </summary>
            <param name="source"></param>
            <param name="filter"></param>
            <param name="order"></param>
            <param name="startRowNum"></param>
            <param name="endRowNum"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dh.ExistsDataSet(System.Data.DataSet)">
            <summary>
            判断dataset里面是否有数据
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.Dc">
            <summary>
            格式转换帮助类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToStr(System.Object)">
            <summary>
            转换为字符串
            </summary>
            <param name="o">对象</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToStr(System.Object,System.Boolean)">
            <summary>
            转换为字符串
            </summary>
            <param name="o">对象</param>
            <param name="bTrim">是否去除前后空格</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToStr(System.Object,System.String)">
            <summary>
            转换为字符串
            </summary>
            <param name="o">对象</param>
            <param name="DefaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToStr(System.Object,System.String,System.Boolean)">
            <summary>
            转换位字符串
            </summary>
            <param name="o">对象</param>
            <param name="DefaultValue">默认值</param>
            <param name="bTrim">是否去除前后空格</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToInt(System.Object)">
            <summary>
            整形转换
            </summary>
            <param name="o"></param>
            <returns>转换失败时返回0</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToInt(System.Object,System.Int32)">
            <summary>
            整型转换
            </summary>
            <param name="o"></param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToLong(System.Object)">
            <summary>
            长整型转换
            </summary>
            <param name="o"></param>
            <returns>转换失败时返回0</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToLong(System.Object,System.Int64)">
            <summary>
            长整型转换
            </summary>
            <param name="o"></param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToFloat(System.Object)">
            <summary>
            Float型转换
            </summary>
            <param name="o"></param>
            <returns>转换失败时返回0</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToFloat(System.Object,System.Single)">
            <summary>
            Float型转换
            </summary>
            <param name="o"></param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToDouble(System.Object)">
            <summary>
            Dobule型转换
            </summary>
            <param name="o"></param>
            <returns>转换失败时返回0</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToDouble(System.Object,System.Double)">
            <summary>
            Dobule型转换
            </summary>
            <param name="o"></param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.MoneyToDecimal(System.String)">
            <summary>
            Money型转Decimal型
            </summary>
            <param name="str"></param>
            <returns>转换失败时返回0</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToDecimal(System.Object)">
            <summary>
            Decimal型转换
            </summary>
            <param name="o"></param>
            <returns>转换失败时返回0</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToDecimal(System.Object,System.Decimal)">
            <summary>
            Decimal型转换
            </summary>
            <param name="o"></param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToMoney(System.Object)">
            <summary>
            Money型转换
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToMoney(System.String)">
            <summary>
            Money型转换
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToDateTime(System.Object)">
            <summary>
            DateTime类型转换，如果对象为空，则返回默认值：1900-01-01 0:00:00
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToDateTime(System.Object,System.DateTime)">
            <summary>
            DateTime类型转换，如果对象为空，则返回参数DefaultValue的值
            </summary>
            <param name="o"></param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.UnixIntToDateTime(System.String)">
            <summary>
            时间戳转为C#格式时间
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.DateTimeToUnixInt(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.DateTimeToTimeStamp(System.DateTime,System.Int32)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="time"></param>
            <param name="length">默认13位</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.TimeStampToDateTime(System.String,System.Int32)">
            <summary>        
            时间戳转为C#格式时间        
            </summary>        
            <param name="timeStamp"></param>
            <param name="length">默认13位</param>        
            <returns></returns>        
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToBool(System.Object)">
            <summary>
            布尔型转换
            </summary>
            <param name="o">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.ToBool(System.Object,System.Boolean)">
            <summary>
            布尔型转换
            </summary>
            <param name="o">要转换的对象</param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.MoneyRound(System.Double,System.Int32)">
            <summary>
            金额型四舍五入
            </summary>
            <param name="value"></param>
            <param name="decimals">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.Round(System.Double,System.Int32)">
            <summary>
            四舍五入
            </summary>
            <param name="d"></param>
            <param name="i">要保留的小数位数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.MoneyRound(System.Decimal,System.Int32)">
            <summary>
            Money型四舍五入
            </summary>
            <param name="value"></param>
            <param name="decimals">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Dc.Round(System.Decimal,System.Int32)">
            <summary>
            四舍五入
            </summary>
            <param name="d"></param>
            <param name="i">要保留的小数位数</param>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.DataConvert">
            <summary>
            格式转换帮助类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToString(System.Object)">
            <summary>
            转换为字符串
            </summary>
            <param name="o">对象</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToString(System.Object,System.Boolean)">
            <summary>
            转换为字符串
            </summary>
            <param name="o">对象</param>
            <param name="bTrim">是否去除前后空格</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToString(System.Object,System.String)">
            <summary>
            转换为字符串
            </summary>
            <param name="o">对象</param>
            <param name="DefaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToString(System.Object,System.String,System.Boolean)">
            <summary>
            转换位字符串
            </summary>
            <param name="o">对象</param>
            <param name="DefaultValue">默认值</param>
            <param name="bTrim">是否去除前后空格</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToInt(System.Object)">
            <summary>
            整形转换
            </summary>
            <param name="o"></param>
            <returns>转换失败时返回0</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToInt(System.Object,System.Int32)">
            <summary>
            整型转换
            </summary>
            <param name="o"></param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToLong(System.Object)">
            <summary>
            长整型转换
            </summary>
            <param name="o"></param>
            <returns>转换失败时返回0</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToLong(System.Object,System.Int64)">
            <summary>
            长整型转换
            </summary>
            <param name="o"></param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToFloat(System.Object)">
            <summary>
            Float型转换
            </summary>
            <param name="o"></param>
            <returns>转换失败时返回0</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToFloat(System.Object,System.Single)">
            <summary>
            Float型转换
            </summary>
            <param name="o"></param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToDouble(System.Object)">
            <summary>
            Dobule型转换
            </summary>
            <param name="o"></param>
            <returns>转换失败时返回0</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToDouble(System.Object,System.Double)">
            <summary>
            Dobule型转换
            </summary>
            <param name="o"></param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.MoneyToDecimal(System.String)">
            <summary>
            Money型转Decimal型
            </summary>
            <param name="str"></param>
            <returns>转换失败时返回0</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToDecimal(System.Object)">
            <summary>
            Decimal型转换
            </summary>
            <param name="o"></param>
            <returns>转换失败时返回0</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToDecimal(System.Object,System.Decimal)">
            <summary>
            Decimal型转换
            </summary>
            <param name="o"></param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToMoney(System.Object)">
            <summary>
            Money型转换
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToMoney(System.String)">
            <summary>
            Money型转换
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToDateTime(System.Object)">
            <summary>
            DateTime类型转换，如果对象为空，则返回默认值：1900-01-01 0:00:00
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToDateTime(System.Object,System.DateTime)">
            <summary>
            DateTime类型转换，如果对象为空，则返回参数DefaultValue的值
            </summary>
            <param name="o"></param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.UnixIntToDateTime(System.String)">
            <summary>
            时间戳转为C#格式时间
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.DateTimeToUnixInt(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.DateTimeToTimeStamp(System.DateTime,System.Int32)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="time"></param>
            <param name="length">默认13位</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.TimeStampToDateTime(System.String,System.Int32)">
            <summary>        
            时间戳转为C#格式时间        
            </summary>        
            <param name="timeStamp"></param>
            <param name="length">默认13位</param>        
            <returns></returns>        
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToBool(System.Object)">
            <summary>
            布尔型转换
            </summary>
            <param name="o">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.ToBool(System.Object,System.Boolean)">
            <summary>
            布尔型转换
            </summary>
            <param name="o">要转换的对象</param>
            <param name="DefaultValue">转换失败时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.MoneyRound(System.Double,System.Int32)">
            <summary>
            金额型四舍五入
            </summary>
            <param name="value"></param>
            <param name="decimals">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.Round(System.Double,System.Int32)">
            <summary>
            四舍五入
            </summary>
            <param name="d"></param>
            <param name="i">要保留的小数位数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.MoneyRound(System.Decimal,System.Int32)">
            <summary>
            Money型四舍五入
            </summary>
            <param name="value"></param>
            <param name="decimals">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataConvert.Round(System.Decimal,System.Int32)">
            <summary>
            四舍五入
            </summary>
            <param name="d"></param>
            <param name="i">要保留的小数位数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataHelper.GetDistinctTable(System.Data.DataTable,System.String[])">
            <summary>
            DataTable去重
            </summary>
            <param name="dtSource">需要去重的DataTable</param>
            <param name="columnNames">依据哪些列去重</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataHelper.GetDistinctTable(System.Data.DataTable)">
            <summary>
            DataTable去重
            </summary>
            <param name="dtSource">需要去重的DataTable</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataHelper.GetTableColumnName(System.Data.DataTable)">
            <summary>
            获取表中所有列名
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataHelper.CombineTables(System.Data.DataSet,System.Data.DataTable,System.Data.DataTable)">
            <summary>
            两个相同字段表的合并
            </summary>
            <param name="_ds"></param>
            <param name="_dt1"></param>
            <param name="_dt2"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataHelper.CopyScopeRows(System.Data.DataSet,System.Int32,System.Int32)">
            <summary>
            对表的数据截取
            </summary>
            <param name="source"></param>
            <param name="startRowNum"></param>
            <param name="endRowNum"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataHelper.CopyScopeRows(System.Data.DataSet,System.String)">
            <summary>
            数据行的筛选
            </summary>
            <param name="source"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataHelper.CopyScopeRows(System.Data.DataSet,System.String,System.String)">
            <summary>
            数据行的筛选，并可以排序
            </summary>
            <param name="source"></param>
            <param name="filter"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataHelper.CopyScopeRows(System.Data.DataSet,System.String,System.Int32,System.Int32)">
            <summary>
            数据行的筛选，并可截取数据行
            </summary>
            <param name="source"></param>
            <param name="filter"></param>
            <param name="startRowNum"></param>
            <param name="endRowNum"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataHelper.CopyScopeRows(System.Data.DataSet,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            数据行的筛选、排序，并可截取数据行
            </summary>
            <param name="source"></param>
            <param name="filter"></param>
            <param name="order"></param>
            <param name="startRowNum"></param>
            <param name="endRowNum"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DataHelper.ExistsDataSet(System.Data.DataSet)">
            <summary>
            判断dataset里面是否有数据
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.Data.OleDbHelper">
            <summary>
            The OleDbHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of OleDbClient.
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.AttachParameters(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbParameter[])">
            <summary>
            This method is used to attach array's of OleDbParameters to an OleDbCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of OleDbParameters tho be added to command</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.AssignParameterValues(System.Data.OleDb.OleDbParameter[],System.Object[])">
            <summary>
            将一个对象数组分配给OleDbParameter参数数组.
            </summary>
            <param name="commandParameters">要分配值的OleDbParameter参数数组</param>
            <param name="parameterValues">将要分配给存储过程参数的对象数组</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.PrepareCommand(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the OleDbCommand to be prepared</param>
            <param name="connection">a valid OleDbConnection, on which to execute this command</param>
            <param name="transaction">a valid OleDbTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbDbCommand (that returns no resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns no resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns no resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns no resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns no resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns no resultset) against the specified 
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified 
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:_51Sole.DJG.Common.Data.OleDbHelper.OleDbConnectionOwnership">
            <summary>
            this enum is used to indicate weather the connection was provided by the caller, or created by OleDbHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.Data.OleDbHelper.OleDbConnectionOwnership.Internal">
            <summary>Connection is owned and managed by OleDbHelper</summary>
        </member>
        <member name="F:_51Sole.DJG.Common.Data.OleDbHelper.OleDbConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[],_51Sole.DJG.Common.Data.OleDbHelper.OleDbConnectionOwnership)">
            <summary>
            Create and prepare an OleDbCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid OleDbConnection, on which to execute this command</param>
            <param name="transaction">a valid OleDbTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by OleDbHelper</param>
            <returns>OleDbDataReader containing the results of the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParameters used to execute the command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              OleDbDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParameters used to execute the command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the specified
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ImportFromExcel(System.String)">
            <summary> 
            从Excel读取数据 
            </summary> 
            <param name="filePath">路径</param> 
            <returns>DataSet</returns> 
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.OutputToExcel(System.Data.DataSet,System.String)">
            <summary>
            将数据导出至Excel
            </summary>
            <param name="source">DataTable对象</param>
            <param name="ExcelFilePath">Excel文件路径</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.OutputToExcelWithColumnType(System.Data.DataSet,System.String)">
            <summary>
            将数据导出至Excel
            </summary>
            <param name="source">DataTable对象</param>
            <param name="ExcelFilePath">Excel文件路径</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelper.ExecutePager(System.String,System.Data.CommandType,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            获取当前页应该显示的记录，注意：查询中必须包含名为ID的自动编号列，若不符合你的要求，就修改一下源码吧 :)
            </summary>
            <param name="connectionString"></param>
            <param name="commandType"></param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">分页容量</param>
            <param name="showString">显示的字段</param>
            <param name="queryString">查询字符串，支持联合查询</param>
            <param name="whereString">查询条件，若有条件限制则必须以where 开头</param>
            <param name="orderString">排序规则</param>
            <param name="pageCount">传出参数：总页数统计</param>
            <param name="recordCount">传出参数：总记录统计</param>
            <returns>装载记录的OleDbDataReader</returns>
        </member>
        <member name="T:_51Sole.DJG.Common.Data.OleDbHelperParameterCache">
            <summary>
            OleDbHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelperParameterCache.DiscoverSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            resolve at run-time the appropriate set of OleDbParameters for a stored procedure
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="includeReturnValueParameter">weather or not to onclude ther return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters to be cached</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an array of OleDbParameters</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <returns>an array of OleDbParameters</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.OleDbHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating weather the return value parameter should be included in the results</param>
            <returns>an array of OleDbParameters</returns>
        </member>
        <member name="T:_51Sole.DJG.Common.Data.SqlHelper">
            <summary>
            SqlServer数据访问帮助类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.GetConn(System.String)">
            <summary>
            创建并打开一个SqlConnection连接
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            将SqlParameter参数数组(参数值)分配给SqlCommand命令.
            这个方法将给任何一个参数分配DBNull.Value;
            该操作将阻止默认值的使用.
            </summary>
            <param name="command">命令名</param>
            <param name="commandParameters">SqlParameters数组</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            将DataRow类型的列值分配到SqlParameter参数数组.
            </summary>
            <param name="commandParameters">要分配值的SqlParameter参数数组</param>
            <param name="dataRow">将要分配给存储过程参数的DataRow</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            将一个对象数组分配给SqlParameter参数数组.
            </summary>
            <param name="commandParameters">要分配值的SqlParameter参数数组</param>
            <param name="parameterValues">将要分配给存储过程参数的对象数组</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            预处理用户提供的命令,数据库连接/事务/命令类型/参数
            </summary>
            <param name="command">要处理的SqlCommand</param>
            <param name="connection">数据库连接</param>
            <param name="transaction">一个有效的事务或者是null值</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名或都T-SQL命令文本</param>
            <param name="commandParameters">和命令相关联的SqlParameter参数数组,如果没有参数为'null'</param>
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定连接字符串,类型的SqlCommand.
            </summary>
            <remarks>
            示例:
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定连接字符串,类型的SqlCommand.如果没有提供参数,不返回结果.
            </summary>
            <remarks>
            示例:
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">SqlParameter参数数组</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            执行指定连接字符串的存储过程,将对象数组的值赋给存储过程参数,
            此方法需要在参数缓存方法中探索参数并生成参数.
            </summary>
            <remarks>
            这个方法没有提供访问输出参数和返回值.
            示例:
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配到存储过程输入参数的对象数组</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令
            </summary>
            <remarks>
            示例:
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的命令
            </summary>
            <remarks>
            示例:
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">T存储过程名称或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行带事务的SqlCommand.
            </summary>
            <remarks>
            示例.:
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">一个有效的事务或者是null值</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行带事务的SqlCommand(指定参数).
            </summary>
            <remarks>
            示例:
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的事务或者是null值</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            执行带事务的SqlCommand(指定参数值).
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:
             int result = ExecuteNonQuery(trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">一个有效的事务或者是null值</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">SqlParamters参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值.
            示例:
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回DataSet.
            </summary>
            <remarks>
            示例:
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet.
            </summary>
            <remarks>
            示例:
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.:
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定事务的命令,返回DataSet.
            </summary>
            <remarks>
            示例:
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定事务的命令,指定参数,返回DataSet.
            </summary>
            <remarks>
            示例:
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            执行指定事务的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.:
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">事务</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="T:_51Sole.DJG.Common.Data.SqlHelper.SqlConnectionOwnership">
            <summary>
            枚举,标识数据库连接是由SqlHelper提供还是由调用者提供
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.Data.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>由SqlHelper提供连接</summary>
        </member>
        <member name="F:_51Sole.DJG.Common.Data.SqlHelper.SqlConnectionOwnership.External">
            <summary>由调用者提供连接</summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],_51Sole.DJG.Common.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            执行指定数据库连接对象的数据阅读器.
            </summary>
            <remarks>
            如果是SqlHelper打开连接,当连接关闭DataReader也将关闭.
            如果是调用都打开连接,DataReader由调用都管理.
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="transaction">一个有效的事务,或者为 'null'</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParameters参数数组,如果没有参数则为'null'</param>
            <param name="connectionOwnership">标识数据库连接对象是由调用者提供还是由SqlHelper提供</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的数据阅读器.
            </summary>
            <remarks>
            示例:
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组(new SqlParameter("@prodid", 24))</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例:
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的数据阅读器.
            </summary>
            <remarks>
            示例:
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例:
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">T存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值.
            </summary>
            <remarks>
            示例:
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
             <summary>
             [调用者方式]执行指定数据库事务的数据阅读器,指定参数值.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
             </remarks>
             <param name="transaction">一个有效的连接事务</param>
             <param name="spName">存储过程名称</param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
             <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
             <summary>
             执行指定数据库连接字符串的命令,指定参数值,返回结果集中的第一行第一列.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
             </remarks>
             <param name="connectionString">>一个有效的数据库连接字符串</param>
             <param name="spName">存储过程名称</param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
             <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
             <summary>
             执行指定数据库连接对象的命令,指定参数值,返回结果集中的第一行第一列.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
             </remarks>
             <param name="connection">一个有效的数据库连接对象</param>
             <param name="spName">存储过程名称</param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
             <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库事务的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">>一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库事务的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
             <summary>
             执行指定数据库事务的命令,指定参数值,返回结果集中的第一行第一列.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
             </remarks>
             <param name="transaction">一个有效的连接事务</param>
             <param name="spName">存储过程名称</param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
             <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回.
            </summary>
            <remarks>
            示例:
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数.
            </summary>
            <remarks>
            示例:
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
             <summary>
             执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
             </remarks>
             <param name="connection">一个有效的数据库连接对象</param>
             <param name="spName">存储过程名称 using "FOR XML AUTO"</param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
             <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回.
            </summary>
            <remarks>
            示例:
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数.
            </summary>
            <remarks>
            示例:
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
             <summary>
             执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
             </remarks>
             <param name="transaction">一个有效的连接事务</param>
             <param name="spName">存储过程名称</param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
             <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例:
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.指定命令参数.
            </summary>
            <remarks>
            示例:
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">分配给命令的SqlParamter参数数组</param>
            <param name="tableNames">要填充结果集的DataSet实例</param>
            <param name="commandParameters">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
             <summary>
             执行指定数据库连接字符串的命令,映射数据表并填充数据集,指定存储过程参数值.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
             </remarks>
             <param name="connectionString">一个有效的数据库连接字符串</param>
             <param name="spName">存储过程名称</param>
             <param name="dataSet">要填充结果集的DataSet实例</param>
             <param name="tableNames">表映射的数据表数组
             用户定义的表名 (可有是实际的表名.)
             </param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例:
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定参数.
            </summary>
            <remarks>
            示例:
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例:
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例:
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集,指定参数.
            </summary>
            <remarks>
            示例:
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
             <summary>
             执行指定数据库事务的命令,映射数据表并填充数据集,指定存储过程参数值.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
             </remarks>
             <param name="transaction">一个有效的连接事务</param>
             <param name="spName">存储过程名称</param>
             <param name="dataSet">要填充结果集的DataSet实例</param>
             <param name="tableNames">表映射的数据表数组
             用户定义的表名 (可有是实际的表名.)
             </param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            [私有方法][内部调用]执行指定数据库连接对象/事务的命令,映射数据表并填充数据集,DataSet/TableNames/SqlParameters.
            </summary>
            <remarks>
            示例:
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            执行数据集更新到数据库,指定inserted, updated, or deleted命令.
            </summary>
            <remarks>
            示例:
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">[追加记录]一个有效的T-SQL语句或存储过程</param>
            <param name="deleteCommand">[删除记录]一个有效的T-SQL语句或存储过程</param>
            <param name="updateCommand">[更新记录]一个有效的T-SQL语句或存储过程</param>
            <param name="dataSet">要更新到数据库的DataSet</param>
            <param name="tableName">要更新到数据库的DataTable</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            创建SqlCommand命令,指定数据库连接对象,存储过程名和参数.
            </summary>
            <remarks>
            示例:
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="sourceColumns">源表的列名称数组</param>
            <returns>返回SqlCommand命令</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
             <summary>
             执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet.
             </summary>
             <param name="connection">一个有效的数据库连接对象</param>
             <param name="spName">存储过程名称</param>
             <param name="dataRow">使用DataRow作为参数值</param>
             <returns>返回一个包含结果集的DataSet.</returns>
            
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="T:_51Sole.DJG.Common.Data.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache提供缓存存储过程参数,并能够在运行时从存储过程中探索参数.
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            探索运行时的存储过程,返回SqlParameter参数数组.
            初始化参数值为 DBNull.Value.
            </summary>
            <param name="connection">一个有效的数据库连接</param>
            <param name="spName">存储过程名称</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回SqlParameter参数数组</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            SqlParameter参数数组的深层拷贝.
            </summary>
            <param name="originalParameters">原始参数数组</param>
            <returns>返回一个同样的参数数组</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            追加参数数组到缓存.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">要缓存的参数数组</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            从缓存中获取参数数组.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>参数数组</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            返回指定的存储过程的参数集
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符</param>
            <param name="spName">存储过程名</param>
            <returns>返回SqlParameter参数数组</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            返回指定的存储过程的参数集
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符.</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回SqlParameter参数数组</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            [内部]返回指定的存储过程的参数集(使用连接对象).
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="connection">一个有效的数据库连接字符</param>
            <param name="spName">存储过程名</param>
            <returns>返回SqlParameter参数数组</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            [内部]返回指定的存储过程的参数集(使用连接对象)
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回SqlParameter参数数组</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Data.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            [私有]返回指定的存储过程的参数集(使用连接对象)
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回SqlParameter参数数组</returns>
        </member>
        <member name="T:_51Sole.DJG.Common.DB">
            <summary>
            MSSQL数据帮助类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.Query(System.String,System.String)">
            <summary>
            执行一条SQL指令
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="sql">更新/插入语句</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.Query(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条SQL指令
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="sql">更新/插入语句</param>
            <param name="ps">查询参数集</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.Query(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            执行一条SQL指令
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="sql">更新/插入语句</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.Query(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条SQL指令
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="sql">更新/插入语句</param>
            <param name="ps">查询参数集</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPQuery(System.String,System.String)">
            <summary>
            执行一条SQL指令
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="spname">存储过程名称</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPQuery(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条SQL指令
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="spname">存储过程名称</param>
            <param name="ps">查询参数集</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPQuery(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            执行一条SQL指令
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="spname">存储过程名称</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPQuery(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条SQL指令
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="spname">存储过程名称</param>
            <param name="ps">查询参数集</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.PSQuery(System.String,System.String)">
            <summary>
            执行一条SQL指令（过时的方法，建议改用SPQuery方法）
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="spname">存储过程名称</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.PSQuery(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条SQL指令（过时的方法，建议改用SPQuery方法）
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="spname">存储过程名称</param>
            <param name="ps">查询参数集</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.PSQuery(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            执行一条SQL指令（过时的方法，建议改用SPQuery方法）
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="spname">存储过程名称</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.PSQuery(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条SQL指令（过时的方法，建议改用SPQuery方法）
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="spname">存储过程名称</param>
            <param name="ps">查询参数集</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.Scalar(System.String,System.String)">
            <summary>
            执行一条SQL对象查询
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="sql">查询语句</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.Scalar(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条SQL对象查询
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="sql">查询语句</param>
            <param name="ps">查询参数集</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.Scalar(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            执行一条SQL对象查询
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="sql">查询语句</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.Scalar(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条SQL对象查询
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="sql">查询语句</param>
            <param name="ps">查询参数集</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPScalar(System.String,System.String)">
            <summary>
            执行一条SQL对象查询
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="spname">存储过程名称</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPScalar(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条SQL对象查询
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="spname">存储过程名称</param>
            <param name="ps">查询参数集</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPScalar(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            执行一条SQL对象查询
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="spname">存储过程名称</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPScalar(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条SQL对象查询
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="spname">存储过程名称</param>
            <param name="ps">查询参数集</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.Reader(System.String,System.String)">
            <summary>
            获取一个记录集
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="sql">查询语句</param>
            <returns>记录集</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.Reader(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取一个记录集
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="sql">查询语句</param>
            <param name="ps">查询参数集</param>
            <returns>记录集</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.Reader(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            获取一个记录集
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="sql">查询语句</param>
            <returns>记录集</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.Reader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取一个记录集
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="sql">查询语句</param>
            <param name="ps">查询参数集</param>
            <returns>记录集</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPReader(System.String,System.String)">
            <summary>
            获取一个记录集
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="spname">存储过程名称</param>
            <returns>记录集</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPReader(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取一个记录集
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="spname">存储过程名称</param>
            <param name="ps">查询参数集</param>
            <returns>记录集</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPReader(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            获取一个记录集
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="spname">存储过程名称</param>
            <returns>记录集</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取一个记录集
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="spname">存储过程名称</param>
            <param name="ps">查询参数集</param>
            <returns>记录集</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.DataSet(System.String,System.String)">
            <summary>
            获取一个DataSet
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="sql">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.DataSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取一个DataSet
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="sql">查询语句</param>
            <param name="ps">查询参数集</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.DataSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            获取一个DataSet
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="sql">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.DataSet(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取一个DataSet
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="sql">查询语句</param>
            <param name="ps">查询参数集</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPDataSet(System.String,System.String)">
            <summary>
            获取一个Dataset
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="spname">存储过程名称</param>
            <returns>Dataset</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPDataSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取一个Dataset
            </summary>
            <param name="connstr">MSSQL数据库连接字符串</param>
            <param name="spname">存储过程名称</param>
            <param name="ps">查询参数集</param>
            <returns>Dataset</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPDataSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            获取一个Dataset
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="spname">存储过程名称</param>
            <returns>Dataset</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DB.SPDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取一个Dataset
            </summary>
            <param name="conn">MSSQL数据库连接对象</param>
            <param name="spname">存储过程名称</param>
            <param name="ps">查询参数集</param>
            <returns>Dataset</returns>
        </member>
        <member name="P:_51Sole.DJG.Common.Debuger.Debug">
            <summary>
            决定是否要启用执行计时功能，为false时，忽略一切计时任务
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Debuger.Start">
            <summary>
            开始一个执行计时
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Debuger.Stop(System.String)">
            <summary>
            停止计时并输出执行时间，输出执行时间后不输出空行
            </summary>
            <param name="description">任务描述</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Debuger.Stop(System.String,System.Boolean)">
            <summary>
            停止计时并输出执行时间
            </summary>
            <param name="description">任务描述</param>
            <param name="endNewLine">输出内容后是输出空行</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Debuger.WriteTime(System.String,System.Boolean)">
            <summary>
            输出执行时间到调试日志
            </summary>
            <param name="description">任务描述</param>
            <param name="endNewLine">输出内容后是否输出空行</param>
        </member>
        <member name="T:_51Sole.DJG.Common.DES">
            <summary>
            DES加密，适配JAVA版DES加解密
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.DES.Encrypt(System.String,System.String)">
            <summary>
            DES加密算法
            </summary>
            <param name="toEncrypt">要加密的字符串</param>
            <param name="key">加密码Key，要求8位长度</param>
            <returns>正确返回加密后的结果，错误返回空字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DES.Decrypt(System.String,System.String)">
            <summary>
            DES解密算法
            </summary>
            <param name="toDecrypt">要解密的字符串</param>
            <param name="key">加密Key，要求8位长度</param>
            <returns>正确返回加密后的结果，错误返回空字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DES.DES3Encrypt(System.String,System.String,System.String,System.String)">
            <summary>
            3DES 加密(基于DES，对一块数据用3个不同的密钥进行3次加密，强度更高)
            </summary>
            <param name="toEncrypt">待加密密文</param>
            <param name="key1">密钥1，要求8位长度</param>
            <param name="key2">密钥2，要求8位长度</param>
            <param name="key3">密钥3，要求8位长度</param>
            <returns>加密结果</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.DES.DES3Decrypt(System.String,System.String,System.String,System.String)">
            <summary>
            3DES 解密(基于DES，对一块数据用3个不同的密钥进行3次加密，强度更高)
            </summary>
            <param name="toDecrypt">待解密密文</param>
            <param name="key1">密钥1，要求8位长度</param>
            <param name="key2">密钥2，要求8位长度</param>
            <param name="key3">密钥3，要求8位长度</param>
            <returns>解密结果</returns>
        </member>
        <member name="T:_51Sole.DJG.Common.EnumHelper">
            <summary>
            Description: 枚举辅助类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.EnumHelper.ToEnumString(System.Int32,System.Type)">
            <summary>
            扩展方法：根据枚举值得到相应的枚举定义字符串
            </summary>
            <param name="value"></param>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.EnumHelper.GetEnumStringFromEnumValue(System.Type)">
            <summary>
            根据枚举类型得到其所有的 值 与 枚举定义字符串 的集合
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.EnumHelper.ToEnumDescriptionString(System.Int32,System.Type)">
            <summary>
            扩展方法：根据枚举值得到属性Description中的描述, 如果没有定义此属性则返回空串
            </summary>
            <param name="value"></param>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.EnumHelper.GetNVCFromEnumValue(System.Type)">
            <summary>
            根据枚举类型得到其所有的 值 与 枚举定义Description属性 的集合
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.EnumHelper.GetSingleEnumValueListForCompound(System.Type,System.Int32)">
            <summary>
            从复合枚举中获取单个的枚举值列表
            </summary>
            <param name="enumType"></param>
            <param name="modelValue"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.EnumHelper.GetCompoundEnumDesc(System.Type,System.Int32)">
            <summary>
            获取复合枚举的 Description 属性的所有内容，多个以逗号隔开
            </summary>
            <param name="enumType"></param>
            <param name="modelValue"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.EnumHelper.GetFirstEnumValueForCompound(System.Type,System.Int32)">
            <summary>
            获取复合枚举的第一个单枚举的对应值，如获取失败，返回 -987654321
            </summary>
            <param name="enumType"></param>
            <param name="modelValue"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.EnumHelper.GetEnumDescription(System.Enum)">
            <summary>
            取得枚举值的Description
            </summary>
            <param name="value">枚举对象，例如：ContentTypes.TextPlain</param>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.FileHelper">
            <summary>
            文件操作帮助类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.GetCRC32Hash(System.String)">
            <summary>
            获取文件的CRC32标识
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.GetMD5Hash(System.String)">
            <summary>
            获取文件MD5哈希值
            </summary>
            <param name="fileName">文件的物理路径</param>
            <returns>文件的MD5哈希值</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.GetSHA1Hash(System.String)">
            <summary>
            获取文件SHA1哈希值
            </summary>
            <param name="fileName">文件的物理路径</param>
            <returns>文件的SHA1哈希值</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.WriteFile(System.String,System.String,System.String)">
            <summary>
            写UTF8编码的文件（如果文件存在会完全覆盖）
            </summary>
            <param name="FolderName">文件输出目录</param>
            <param name="FileName">文件名</param>
            <param name="FileContent">文件内容</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.WriteFile(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            写文件（如果文件存在会完全覆盖）
            </summary>
            <param name="FolderName">文件输出目录</param>
            <param name="FileName">文件名</param>
            <param name="FileContent">文件内容</param>
            <param name="Encode">文件编码</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.WriteFile(System.String,System.String,System.String,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            写文件
            </summary>
            <param name="FolderName">文件输出目录</param>
            <param name="FileName">文件名</param>
            <param name="FileContent">文件内容</param>
            <param name="Encode">文件编码</param>
            <param name="AppendText">是否以追加内容的方式写入内容</param>
            <param name="AppendNewline">是否以带行结束符的方式追加内容</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.FileToBase64Str(System.String)">
            <summary>
            文件转为Base64编码
            </summary>
            <param name="filePath">文件的完整物理路径</param>
            <returns>如果转换失败，将返回Empty字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.Base64StrToFile(System.String,System.String)">
            <summary>
            文件Base64解码
            </summary>
            <param name="base64Str">文件的Base64编码字符串</param>
            <param name="outPath">要生成文件路径</param>
            <returns>解码成功返回true，失败返回false</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.DownloadZipDir(System.String,System.String)">
            <summary>
            以zip格式压缩指定目录并下载压缩文件
            </summary>
            <param name="DirPath">要压缩的目录</param>
            <param name="ZipFileName">生成的zip文件名</param>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.AddZipEntry(System.String,System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>
            压缩指定目录下的文件到zip文件中
            </summary>
            <param name="PathStr">要压缩的目录</param>
            <param name="BaseDir">根目录</param>
            <param name="zos">zip文件流对象</param>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.GetFileExt(System.String)">
            <summary>
            取得文件扩展名
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.GetFileName(System.String)">
            <summary>
            取得文件名
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.GetFileNameWithoutExtension(System.String)">
            <summary>
            取得不含扩展名的文件名
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.GetNewFileName(System.String)">
            <summary>
            取得一个新的文件名
            </summary>
            <param name="fileExt">文件扩展名，如：.jpg</param>
            <returns>新文件名，如：201709211430508569.jpg</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.CreateDir(System.String)">
            <summary>
            将完整的文件夹路径建好
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.DownloadFile(System.String,System.String,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="url">下载地址</param>
            <param name="directory">保存文件的物理路径（如：E:\MyDownloadFile\）</param>
            <param name="newFileName">是否使用新文件名</param>
            <returns>文件名称</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.GetUploadPath(System.String,System.String)">
            <summary>
            取得上传文件的保存路径
            </summary>
            <param name="appSettingsKey">上传路径的AppSettingsKey名称（Key的Value值格式如：D:\Web\UpFiles\）</param>
            <param name="defaultFolder">当AppSettingsKey不存在或值为空时，使用的默认上传目录（如：/UpFiles/）。如果该值也为空，则默认上传到/UpFiles/下。</param>
            <returns>格式如：D:\Web\UpFiles\</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.GetAllowExt(_51Sole.DJG.Common.FileType,System.Boolean@)">
            <summary>
            根据文件类型获取允许上传的文件扩展名列表
            </summary>
            <param name="fileType"></param>
            <param name="isImage"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.UI.WebControls.FileUpload,System.Int64,System.String,_51Sole.DJG.Common.FileType,System.Boolean,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="fileType">文件类型</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.HttpPostedFile,System.Int64,System.String,_51Sole.DJG.Common.FileType,System.Boolean,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="fileType">文件类型</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.UI.HtmlControls.HtmlInputFile,System.Int64,System.String,_51Sole.DJG.Common.FileType,System.Boolean,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="fileType">文件类型</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.UI.WebControls.FileUpload,System.Int64,System.String,_51Sole.DJG.Common.FileType,System.Boolean,System.Int64,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="fileType">文件类型</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="bigImgQuality">大图保存质量，值越大，质量越高（0-100）</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.HttpPostedFile,System.Int64,System.String,_51Sole.DJG.Common.FileType,System.Boolean,System.Int64,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="fileType">文件类型</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="bigImgQuality">大图保存质量，值越大，质量越高（0-100）</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.UI.HtmlControls.HtmlInputFile,System.Int64,System.String,_51Sole.DJG.Common.FileType,System.Boolean,System.Int64,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="fileType">文件类型</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="bigImgQuality">大图保存质量，值越大，质量越高（0-100）</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.UI.WebControls.FileUpload,System.Int64,System.String,_51Sole.DJG.Common.FileType,System.Boolean,_51Sole.DJG.Common.ImageHelper.ShuiYinInfo,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="fileType">文件类型</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="shuiYinInfo">水印信息</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.HttpPostedFile,System.Int64,System.String,_51Sole.DJG.Common.FileType,System.Boolean,_51Sole.DJG.Common.ImageHelper.ShuiYinInfo,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="fileType">文件类型</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="shuiYinInfo">水印信息</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.UI.HtmlControls.HtmlInputFile,System.Int64,System.String,_51Sole.DJG.Common.FileType,System.Boolean,_51Sole.DJG.Common.ImageHelper.ShuiYinInfo,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="fileType">文件类型</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="shuiYinInfo">水印信息</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.UI.WebControls.FileUpload,System.Int64,System.String,_51Sole.DJG.Common.FileType,System.Boolean,System.Int64,_51Sole.DJG.Common.ImageHelper.ShuiYinInfo,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="fileType">文件类型</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="bigImgQuality">大图保存质量，值越大，质量越高（0-100）</param>
            <param name="shuiYinInfo">水印信息</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.HttpPostedFile,System.Int64,System.String,_51Sole.DJG.Common.FileType,System.Boolean,System.Int64,_51Sole.DJG.Common.ImageHelper.ShuiYinInfo,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="fileType">文件类型</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="bigImgQuality">大图保存质量，值越大，质量越高（0-100）</param>
            <param name="shuiYinInfo">水印信息</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.UI.HtmlControls.HtmlInputFile,System.Int64,System.String,_51Sole.DJG.Common.FileType,System.Boolean,System.Int64,_51Sole.DJG.Common.ImageHelper.ShuiYinInfo,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="fileType">文件类型</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="bigImgQuality">大图保存质量，值越大，质量越高（0-100）</param>
            <param name="shuiYinInfo">水印信息</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.UI.WebControls.FileUpload,System.Int64,System.String,System.String[],System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="allowExt">可上传的文件类型（如：new string[]{ ".rar", ".zip", ".7z" }）</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.HttpPostedFile,System.Int64,System.String,System.String[],System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="allowExt">可上传的文件类型（如：new string[]{ ".rar", ".zip", ".7z" }）</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.UI.HtmlControls.HtmlInputFile,System.Int64,System.String,System.String[],System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="allowExt">可上传的文件类型（如：new string[]{ ".rar", ".zip", ".7z" }）</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.UI.WebControls.FileUpload,System.Int64,System.String,System.String[],System.Boolean,System.Boolean,System.Boolean,System.Int64,_51Sole.DJG.Common.ImageHelper.ShuiYinInfo,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="allowExt">可上传的文件类型（如：new string[]{ ".rar", ".zip", ".7z" }）</param>
            <param name="isImage">是否是图片文件</param>
            <param name="maxWH">是否自动缩小图片宽高最大值到1920px</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="bigImgQuality">大图保存质量，值越大，质量越高（0-100）</param>
            <param name="shuiYinInfo">水印信息</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.HttpPostedFile,System.Int64,System.String,System.String[],System.Boolean,System.Boolean,System.Boolean,System.Int64,_51Sole.DJG.Common.ImageHelper.ShuiYinInfo,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="allowExt">可上传的文件类型（如：new string[]{ ".rar", ".zip", ".7z" }）</param>
            <param name="isImage">是否是图片文件</param>
            <param name="maxWH">是否自动缩小图片宽高最大值到1920px</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="bigImgQuality">大图保存质量，值越大，质量越高（0-100）</param>
            <param name="shuiYinInfo">水印信息</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.FileHelper.UploadFile(System.Web.UI.HtmlControls.HtmlInputFile,System.Int64,System.String,System.String[],System.Boolean,System.Boolean,System.Boolean,System.Int64,_51Sole.DJG.Common.ImageHelper.ShuiYinInfo,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="control">文件上传控件对象</param>
            <param name="maxLength">允许上传的大小（5MB = 1024*1024*5）</param>
            <param name="savePath">文件保存的磁盘目录（如：D:\Images\），为空时默认上传到/UpFiles/目录下</param>
            <param name="allowExt">可上传的文件类型（如：new string[]{ ".rar", ".zip", ".7z" }）</param>
            <param name="isImage">是否是图片文件</param>
            <param name="maxWH">是否自动缩小图片宽高最大值到1920px</param>
            <param name="bms">是否生成大、中、小图</param>
            <param name="bigImgQuality">大图保存质量，值越大，质量越高（0-100）</param>
            <param name="shuiYinInfo">水印信息</param>
            <param name="msg">错误信息</param>
            <returns>文件的网络路径（如：/20170925/201709251603585638.jpg）</returns>
        </member>
        <member name="T:_51Sole.DJG.Common.FileType">
            <summary>
            上传的文件类型
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.FileType.IMAGE">
            <summary>
            图片文件{ ".jpg", ".jpeg", ".gif", ".png", ".bmp" }
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.FileType.RAR">
            <summary>
            压缩文件{ ".rar", ".zip", ".7z" }
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.FileType.MEDIA">
            <summary>
            视频文件{ ".avi", ".rm", ".mp4", ".asf", ".wmv", ".bat", ".mov", ".flv", ".mpg", ".mpeg", ".vob", ".vcd", ".dvd", ".rmvb" }
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.FileType.CSV">
            <summary>
            CSV文件{ ".csv" }
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.FileType.FILE">
            <summary>
            所有允许的文件{ ".csv", ".jpg", ".jpeg", ".gif", ".png", ".bmp", ".rar", ".zip", ".7z", ".avi", ".rm", ".mp4", ".asf", ".wmv", ".bat", ".mov", ".flv", ".mpg", ".mpeg", ".vob", ".vcd", ".dvd", ".rmvb", ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".txt" }
            </summary>
        </member>
        <member name="T:_51Sole.DJG.Common.HttpHelper">
            <summary>
            网络操作帮助类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.HttpHelper.GetWebRequest(System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以GET方式请求一个网页，返回网页的HTML源码
            </summary>
            <param name="url">要请求的网页地址</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的网页HTML源码</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.HttpHelper.GetWebRequest(System.String,System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以GET方式请求一个网页，返回网页的HTML源码
            </summary>
            <param name="url">要请求的网页地址</param>
            <param name="userAgent">UserAgent的内容</param>
            <param name="referer">Referer的内容</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的网页HTML源码</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.HttpHelper.PostWebRequest(System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="postData"><![CDATA[要提交的数据（如：a=SS&b=WW）]]></param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.HttpHelper.PostWebRequest(System.String,System.String,System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="postData"><![CDATA[要提交的数据（如：a=SS&b=WW）]]></param>
            <param name="userAgent">UserAgent的内容</param>
            <param name="referer">Referer的内容</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.HttpHelper.PostJSON(System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="json">要提交的JSON数据</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.HttpHelper.PostJSON(System.String,System.String,System.Collections.Hashtable,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="json">要提交的JSON数据</param>
            <param name="headers">要附带的其它Header项集合</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.HttpHelper.PostJSON(System.String,System.String,System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="json">要提交的JSON数据</param>
            <param name="userAgent">UserAgent的内容</param>
            <param name="referer">Referer的内容</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.HttpHelper.PostJSON(System.String,System.String,System.String,System.String,System.Collections.Hashtable,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="json">要提交的JSON数据</param>
            <param name="userAgent">UserAgent的内容</param>
            <param name="referer">Referer的内容</param>
            <param name="headers">要附带的其它Header项集合</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.HttpHelper.GetPostJSON">
            <summary>
            获取POST方式提交上来的JSON数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.ImagePosition">
            <summary>
            图片位置
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ImagePosition.LeftTop">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ImagePosition.LeftBottom">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ImagePosition.RightTop">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ImagePosition.RigthBottom">
            <summary>
            右下
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ImagePosition.TopMiddle">
            <summary>
            顶部居中
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ImagePosition.BottomMiddle">
            <summary>
            底部居中
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ImagePosition.Center">
            <summary>
            中心
            </summary>
        </member>
        <member name="T:_51Sole.DJG.Common.ShuiYinType">
            <summary>
            水印类型
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ShuiYinType.Word">
            <summary>
            文字水印
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ShuiYinType.WordFull">
            <summary>
            平铺的文字水印
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.ShuiYinType.Picture">
            <summary>
            图片水印
            </summary>
        </member>
        <member name="T:_51Sole.DJG.Common.ImageHelper">
             <summary>
            ImageHelper 的摘要说明
             </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.ImageHelper.Clone``1(``0)">
            <summary>
            对象流克隆
            </summary>
            <typeparam name="T"></typeparam>
            <param name="RealObject"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.ImageHelper.GetImageFormat(System.String)">
            <summary>
            根据文件扩展名返回对应的ImageFormat
            </summary>
            <param name="ext">文件扩展名</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.ImageHelper.GetCodecInfo(System.String)">
            <summary>
            根据文件扩展名返回对应的ImageCodecInfo
            </summary>
            <param name="ext">文件扩展名</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.ImageHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            生成缩略图（不建议再使用该方法，请使用别一个重载方法）
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式：HW 指定高宽缩放（可能变形）、W 指定宽，高按比例、H 指定高，宽按比例、AUTO 自动按比例缩放（以宽高中大的值为准）、CUT 指定高宽裁减（不变形）</param>
            <param name="imageType">要缩略图保存的格式(gif,jpg,bmp,png) 为空或未知类型都视为jpg</param>
            <param name="thumbnailOnly">只缩小，不放大</param>
        </member>
        <member name="M:_51Sole.DJG.Common.ImageHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String,System.Int64,System.Boolean)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式：HW 指定高宽缩放（可能变形）、W 指定宽，高按比例、H 指定高，宽按比例、AUTO 自动按比例缩放（以宽高中大的值为准）、CUT 指定高宽裁减（不变形）</param>
            <param name="quality">图片保存质量，值越大，质量越高（0-100）</param>
            <param name="thumbnailOnly">只缩小，不放大</param>
        </member>
        <member name="M:_51Sole.DJG.Common.ImageHelper.AddShuiYinWord(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,_51Sole.DJG.Common.ImagePosition,System.Int32,System.Int32,System.Int64)">
            <summary>
            在图片上增加文字水印
            </summary>
            <param name="filePath">原服务器图片路径</param>
            <param name="shuiYinText">水印文字内容</param>
            <param name="alpha">透明度，值越小，透明度越高（0-255）</param>
            <param name="fontSize">字号</param>
            <param name="red">RGB水印颜色red的值</param>
            <param name="green">RGB水印颜色green的值</param>
            <param name="blue">RGB水印颜色blue的值</param>
            <param name="position">水印位置</param>
            <param name="x">x坐标偏移量</param>
            <param name="y">y坐标偏移量</param>
            <param name="quality">图片保存质量，值越大，质量越高（0-100）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.ImageHelper.AddShuiYinWordFull(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            在图片上增加文字平铺水印
            </summary>
            <param name="filePath">原服务器图片路径</param>
            <param name="shuiYinText">水印文字内容</param>
            <param name="alpha">透明度，值越小，透明度越高（0-255）</param>
            <param name="fontSize">字号</param>
            <param name="red">RGB水印颜色red的值</param>
            <param name="green">RGB水印颜色green的值</param>
            <param name="blue">RGB水印颜色blue的值</param>
            <param name="x">x轴位移量</param>
            <param name="y">y轴位移量</param>
            <param name="quality">图片保存质量，值越大，质量越高（0-100）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.ImageHelper.AddShuiYinPic(System.String,System.String,_51Sole.DJG.Common.ImagePosition,System.Int32,System.Int32,System.Int64)">
            <summary>
            在图片右下角添加图片水印
            </summary>
            <param name="filePath">原服务器图片路径</param>
            <param name="waterFilePath">水印图片路径</param>
            <param name="position">水印位置</param>
            <param name="x">x坐标偏移量</param>
            <param name="y">y坐标偏移量</param>
            <param name="quality">图片保存质量，值越大，质量越高（0-100）</param>
        </member>
        <member name="T:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo">
            <summary>
            水印信息类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo.shuiYin">
            <summary>
            水印文字内容或水印图片路径
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo.shuiYinType">
            <summary>
            输出的水印类型
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo.position">
            <summary>
            水印输出的位置
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo.alpha">
            <summary>
            文字水印的透明度（0-255）
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo.fontSize">
            <summary>
            文字水印的字号
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo.colorRed">
            <summary>
            水印文字颜色R值
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo.colorGreen">
            <summary>
            水印文字颜色G值
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo.colorBlue">
            <summary>
            水印文字颜色B值
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo.x">
            <summary>
            x坐标位移量
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo.y">
            <summary>
            y坐标位移量
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.ImageHelper.ShuiYinInfo.quality">
            <summary>
            保存图片质量（0-100）
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.IPHelper.GetIP">
            <summary>
            取得用户IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPHelper.IP">
            <summary>
            取得当前用户的IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPHelper.IpFrom(System.String,System.String@)">
            <summary>
            查询IP地址来源（基于百度IP查询接口）
            </summary>
            <param name="ip">要查询的IP地址，为空时将自动获取当前用户IP地址</param>
            <param name="queryIP">输出被查询的IP地址</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPHelper.GetFrom">
            <summary>
            取得当前访客的IP来源地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPHelper.GetFrom(System.String@)">
            <summary>
            取得当前访客的ip地址及来源地址
            </summary>
            <param name="ip">访客的ip地址保存变量</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPHelper.GetFrom(System.String)">
            <summary>
            取得指定IP的来源地址
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPHelper.GetFrom(System.String,System.Boolean)">
            <summary>
            取得指定IP的来源地址
            </summary>
            <param name="ip"></param>
            <param name="fullProvinceName"></param>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.IPIPHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.IPIPHelper.#ctor(System.String)">
            <summary>
             构造函数
            </summary>
            <param name="ipFilePath">DATX数据库文件路径</param>
        </member>
        <member name="M:_51Sole.DJG.Common.IPIPHelper.GetIP">
            <summary>
            取得用户IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPIPHelper.GetFrom">
            <summary>
            取得当前访客的IP来源地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPIPHelper.GetFrom(System.String@)">
            <summary>
            取得当前访客的ip地址及来源地址
            </summary>
            <param name="ip">访客的ip地址保存变量</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPIPHelper.GetFrom(System.String)">
            <summary>
            取得指定IP的来源地址
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPIPHelper.GetFrom(System.String,System.Boolean)">
            <summary>
            取得指定IP的来源地址
            </summary>
            <param name="ip"></param>
            <param name="fullProvinceName"></param>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.Logger">
            <summary>
            日志操作类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Logger.WriteLog(System.String)">
            <summary>
            写文本日志（默认写到当前项目的Logs目录下，如果目录不存在则会自动创建）
            </summary>
            <param name="content">日志内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Logger.WriteLog(System.String,System.Boolean)">
            <summary>
            写文本日志（默认写到当前项目的Logs目录下，如果目录不存在则会自动创建）
            </summary>
            <param name="content">日志内容</param>
            <param name="outputLogTime">在日志内容前面是否加上当前时间</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Logger.WriteLog(System.String,System.String)">
            <summary>
            写文本日志（如果目录不存在则会自动创建）
            </summary>
            <param name="fileDir">日志输出的路径（如D:\WebLogs）</param>
            <param name="content">日志内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Logger.WriteLog(System.String,System.String,System.Boolean)">
            <summary>
            写文本日志（如果目录不存在则会自动创建）
            </summary>
            <param name="fileDir">日志输出的路径（如D:\WebLogs）</param>
            <param name="content">日志内容</param>
            <param name="outputLogTime">在日志内容前面是否加上当前时间</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Logger.WriteLogByFileName(System.String,System.String)">
            <summary>
            写文本日志，可指定日志文件名（默认写到当前项目的Logs目录下，如果目录不存在则会自动创建）
            </summary>
            <param name="filename">日志文件名</param>
            <param name="content">日志内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Logger.WriteLogByFileName(System.String,System.String,System.Boolean)">
            <summary>
            写文本日志，可指定日志文件名（默认写到当前项目的Logs目录下，如果目录不存在则会自动创建）
            </summary>
            <param name="fileName">日志文件名</param>
            <param name="content">日志内容</param>
            <param name="outputLogTime">在日志内容前面是否加上当前时间</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Logger.WriteFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            写文本内容到指定文件，可指定目录和文件名（如果目录不存在则会自动创建）
            </summary>
            <param name="path">要保存的目录（如：Logs\\Output）</param>
            <param name="fileName">日志文件名</param>
            <param name="content">日志内容</param>
            <param name="outputLogTime">在日志内容前面是否加上当前时间</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Logger.WriteFile(System.String,System.String,System.Boolean)">
            <summary>
            将指定内容写入文件（如果目录不存在则会自动创建）
            </summary>
            <param name="fileDir">要输出内容的文件路径（如：D:\\Soft\\Logs\\20171219.log）</param>
            <param name="content">要写入的文本内容</param>
            <param name="outputLogTime">在输出的内容前面是否加上当前时间</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Logger.SystemLog(System.String,System.String,System.Int32)">
            <summary>
            写系统日志
            </summary>
            <param name="content">日志内容</param>
            <param name="source">日志来源</param>
            <param name="eventType">信息类型：1 错误，2 审核失败，3 信息，4 审核成功，5 警告</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Logger.DeleteSystemLog(System.String)">
            <summary>
            删除系统日志
            </summary>
            <param name="LogName">要删除的日志名称</param>
        </member>
        <member name="T:_51Sole.DJG.Common.NetHelper">
            <summary>
            网络帮助类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.NetHelper.Ping(System.String)">
            <summary>
            是否能 Ping 通指定的主机
            </summary>
            <param name="ip">ip 地址或主机名或域名</param>
            <returns>true 通，false 不通</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.NetHelper.GetLocalIP">
            <summary>
            取当前电脑的IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.NetHelper.GetHostNameByIP(System.String)">
            <summary>
            根据IP地址获得主机名称
            </summary>
            <param name="ip">主机的IP地址</param>
            <returns>主机名称</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.NetHelper.GetIPByHostName(System.String)">
            <summary>
            根据主机名（域名）获得主机的IP地址
            </summary>
            <param name="hostName">主机名或域名</param>
            <example>GetIPByHostName("www.google.com");</example>
            <returns>主机的IP地址</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.NetHelper.LanSearch">
            <summary>
            局域网IP搜索
            </summary>
        </member>
        <member name="T:_51Sole.DJG.Common.PageHelper">
             <summary>
            PageHelper 的摘要说明
             </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            输出分页页码（首页、末页、上一页、下一页、数字页码、总页数）
            </summary>
            <param name="RecordCount"></param>
            <param name="PageSize"></param>
            <param name="CurrentPage"></param>
            <param name="PageName"></param>
            <param name="PageParam"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            输出分页页码
            </summary>
            <param name="RecordCount"></param>
            <param name="PageSize"></param>
            <param name="CurrentPage"></param>
            <param name="PageName"></param>
            <param name="PageParam"></param>
            <param name="ShowGoToBox"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <param name="LinkCount">中间要显示的链接个数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <param name="LinkCount">中间要显示的链接个数</param>
            <param name="MaxPage">要显示的最大页码（小于或等于0时，不限制最大页码输出）</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <param name="LinkCount">中间要显示的链接个数</param>
            <param name="ShowTotalPage">是否显示总页数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <param name="LinkCount">中间要显示的链接个数</param>
            <param name="MaxPage">要显示的最大页码（小于或等于0时，不限制最大页码输出）</param>
            <param name="ShowTotalPage">是否显示总页数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <param name="LinkCount">中间要显示的链接个数</param>
            <param name="CurrentLinkFormatType">当前页链接的标签类型（span|a）</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <param name="LinkCount">中间要显示的链接个数</param>
            <param name="MaxPage">要显示的最大页码（小于或等于0时，不限制最大页码输出）</param>
            <param name="CurrentLinkFormatType">当前页链接的标签类型（span|a）</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <param name="LinkCount">中间要显示的链接个数</param>
            <param name="ShowTotalPage">是否显示总页数</param>
            <param name="CurrentLinkFormatType">当前页链接的标签类型（span|a）</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <param name="LinkCount">中间要显示的链接个数</param>
            <param name="MaxPage">要显示的最大页码（小于或等于0时，不限制最大页码输出）</param>
            <param name="ShowTotalPage">是否显示总页数</param>
            <param name="CurrentLinkFormatType">当前页链接的标签类型（span|a）</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <param name="MaxPage">要显示的最大页码（小于或等于0时，不限制最大页码输出）</param>
            <param name="WrapUL">分页链接列表是否用<ul></ul>标签包起来</param>
            <param name="ShowGoToBox">是否显示页码跳转框（当为true时，将同时输出总页数）</param>
            <param name="ShowFirstLastPage">是否显示首页、末页</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <param name="MaxPage">要显示的最大页码（小于或等于0时，不限制最大页码输出）</param>
            <param name="WrapUL">分页链接列表是否用<ul></ul>标签包起来</param>
            <param name="ShowTotalPage">是否显示总页数信息</param>
            <param name="ShowGoToBox">是否显示页码跳转框（当为true时，将同时输出总页数）</param>
            <param name="ShowFirstLastPage">是否显示首页、末页</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <param name="MaxPage">要显示的最大页码（小于或等于0时，不限制最大页码输出）</param>
            <param name="WrapUL">分页链接列表是否用<ul></ul>标签包起来</param>
            <param name="ShowTotalPage">是否显示总页数信息</param>
            <param name="ShowGoToBox">是否显示页码跳转框（当为true时，将同时输出总页数）</param>
            <param name="ShowFirstLastPage">是否显示首页、末页</param>
            <param name="LinkCount">中间要显示的链接个数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPage(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            输出分页页码（兼容Url参数方式和伪静态方式，可自定义当前页样式）
            </summary>
            <param name="RecordCount">记录总条数</param>
            <param name="PageSize">每页显示的数量</param>
            <param name="CurrentPage">当前页码</param>
            <param name="CurrentPageClass">当前页码的class样式值</param>
            <param name="UrlFormat">分页链接的URL格式（用{0}为页码占位，如：/b2c/list_28{0}/、/b2c/list.aspx?sid=28&amp;page={0}）</param>
            <param name="FirstPageUrlFormat">页码为第1页时的链接地址格式，如：/b2c/list_28/、/b2c/list.aspx?sid=28</param>
            <param name="MaxPage">要显示的最大页码（小于或等于0时，不限制最大页码输出）</param>
            <param name="WrapUL">分页链接列表是否用<ul></ul>标签包起来</param>
            <param name="ShowTotalPage">是否显示总页数信息</param>
            <param name="ShowGoToBox">是否显示页码跳转框（当为true时，将同时输出总页数）</param>
            <param name="ShowFirstLastPage">是否显示首页、末页</param>
            <param name="LinkCount">中间要显示的链接个数</param>
            <param name="LinkTextFormat">中间页码文本格式（用{0}为页码占位，如：[{0}]）</param>
            <param name="CurrentLinkTextFormat">当前页码文本格式（用{0}为页码占位，如：[{0}]）</param>
            <param name="CurrentLinkFormatType">当前页链接的标签类型（span|a）</param>
            <param name="FirstPageLinkText">首页链接的文本</param>
            <param name="LastPageLinkText">末页链接的文本</param>
            <param name="PrevPageLinkText">上一页链接的文本</param>
            <param name="NextPageLinkText">下一页链接的文本</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPageA(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            输出分页页码，可选择是否显示快速跳转框（首页、末页、上一页、下一页、数字页码、总页数）
            </summary>
            <param name="RecordCount"></param>
            <param name="PageCount"></param>
            <param name="CurrentPage"></param>
            <param name="PageName"></param>
            <param name="PageParam"></param>
            <param name="ShowGoToBox"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.ShowPageB(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            输出分页页码（仅显示上一页、数字页码、下一页）
            </summary>
            <param name="RecordCount"></param>
            <param name="PageSize"></param>
            <param name="CurrentPage"></param>
            <param name="PageName"></param>
            <param name="PageParam"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.pageInation(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            输出分页页码（首页、末页、上一页、下一页、数字页码、总页数、快速跳转框）
            </summary>
            <param name="page">当前第多少页</param>
            <param name="allpage">总多少页</param>
            <param name="PageName">分页所在页面文件名</param>
            <param name="PageParam"><![CDATA[地址中需要带上的参数列表，如：uid=10&ut=1]]></param>
            <param name="ShowGoToBox">页码链接后面是否显示快速跳转输入框</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.PageHelper.pageInationB(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            输出分页页码（仅显示上一页、数字页码、下一页）
            </summary>
            <param name="page">当前第多少页</param>
            <param name="allpage">总多少页</param>
            <param name="PageName">分页所在页面文件名</param>
            <param name="PageParam"><![CDATA[地址中需要带上的参数列表，如：uid=10&ut=1]]></param>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.QQOAuthHelper">
            <summary>
            QQ登录帮助类
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.QQOAuthHelper.QQAppID">
            <summary>
            QQ登录接口的AppID
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.QQOAuthHelper.QQAppKey">
            <summary>
            QQ登录接口的AppKey
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.QQOAuthHelper.QQCallBack">
            <summary>
            QQ登录回调地址
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.QQOAuthHelper.QQLogin">
            <summary>
            发起QQ登录，会产生一个Session["QQState"]，保存state的值
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.QQOAuthHelper.CheckState(System.String)">
            <summary>
            state合法性校验
            </summary>
            <param name="state">要检验的state值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.QQOAuthHelper.ClearState">
            <summary>
            清除state的Session变量
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.QQOAuthHelper.GetQQUserInfo(System.String)">
            <summary>
            取得一个QQ用户对象
            </summary>
            <param name="code">authorization code</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.QQOAuthHelper.GetQQUserInfo(System.String,System.Boolean)">
            <summary>
            取得一个QQ用户对象
            </summary>
            <param name="code">authorization code</param>
            <param name="writeLog">是否写日志</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.QQOAuthHelper.GetOauthInfo(System.String)">
            <summary>
            获取oauth信息
            </summary>
            <param name="code">authorization code</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.QQOAuthHelper.GetOpenID(System.String)">
            <summary>
            获取QQ账号的OpenID
            </summary>
            <param name="access_token">授权令牌，Access_Token。</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.QQOAuthHelper.GetUserInfo(System.String,System.Boolean)">
            <summary>
            取得一个QQ用户信息
            </summary>
            <param name="code">authorization code</param>
            <param name="writeLog">是否写日志</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.QQOAuthHelper.GetUserInfo(System.String,System.String,System.Boolean)">
            <summary>
            get_user_info
            </summary>
            <param name="access_token">授权令牌，Access_Token。</param>
            <param name="openID">用户的ID，与QQ号码一一对应。</param>
            <param name="writeLog">是否写日志</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.QQOAuthHelper.CutString(System.String,System.String,System.String)">
            <summary>
            截取字符串中两个字符串中的字符串
            </summary>
            <param name="str">字符串</param>
            <param name="startStr">开始字符串</param>
            <param name="endStr">结束字符串</param>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.QQOauthInfo">
            <summary>
            QQ登录授权类
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQOauthInfo.AccessToken">
            <summary>
            授权令牌，Access_Token。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQOauthInfo.ExpiresIn">
            <summary>
            该access token的有效期，单位为秒。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQOauthInfo.RefreshToken">
            <summary>
            在授权自动续期步骤中，获取新的Access_Token时需要提供的参数。
            </summary>
        </member>
        <member name="T:_51Sole.DJG.Common.QQUserInfo">
            <summary>
            QQ用户类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.QQUserInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUserInfo.ret">
            <summary>
            返回码，为0时代表获取QQ用户信息成功
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUserInfo.msg">
            <summary>
            如果ret小于0，会有相应的错误信息提示，返回数据全部用UTF-8编码。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUserInfo.OpenID">
            <summary>
            openid是此网站上唯一对应用户身份的标识，网站可将此ID进行存储便于用户下次登录时辨识其身份，或将其与用户在网站上的原有账号进行绑定。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUserInfo.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUserInfo.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUserInfo.QQFaceImage40">
            <summary>
            40x40的QQ头像图片
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUserInfo.QQFaceImage100">
            <summary>
            100x100的QQ头像图片（不是每个人都有）
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUserInfo.Province">
            <summary>
            省份
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUserInfo.City">
            <summary>
            城市
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUserInfo.Year">
            <summary>
            出生年份
            </summary>
        </member>
        <member name="T:_51Sole.DJG.Common.QQUser_Info">
            <summary>
            get_user_info类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.QQUser_Info.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.ret">
            <summary>
            返回码，为0时代表获取QQ用户信息成功
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.msg">
            <summary>
            如果ret小于0，会有相应的错误信息提示，返回数据全部用UTF-8编码。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.nickname">
            <summary>
            用户在QQ空间的昵称
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.gender">
            <summary>
            性别。 如果获取不到则默认返回”男”
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.province">
            <summary>
            省份
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.city">
            <summary>
            城市
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.year">
            <summary>
            出生年份
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.figureurl">
            <summary>
            大小为30×30像素的QQ空间头像URL。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.figureurl_1">
            <summary>
            大小为50×50像素的QQ空间头像URL。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.figureurl_2">
            <summary>
            大小为100×100像素的QQ空间头像URL。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.figureurl_qq_1">
            <summary>
            大小为40×40像素的QQ头像URL。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.figureurl_qq_2">
            <summary>
            大小为100×100像素的QQ头像URL。需要注意，不是所有的用户都拥有QQ的100×100的头像，但40×40像素则是一定会有。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.is_yellow_vip">
            <summary>
            标识用户是否为黄钻用户（0：不是；1：是）
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.vip">
            <summary>
            标识用户是否为黄钻用户（0：不是；1：是）
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.yellow_vip_level">
            <summary>
            黄钻等级
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.level">
            <summary>
            黄钻等级
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.QQUser_Info.is_yellow_year_vip">
            <summary>
            标识是否为年费黄钻用户（0：不是； 1：是）
            </summary>
        </member>
        <member name="T:_51Sole.DJG.Common.RSACrypto">
            <summary>
            RSA加密解密类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.#ctor(System.String)">
            <summary>
            通过一个RSA对象密钥的字符串创建RSA加密对象
            </summary>
            <param name="XmlString">RSA对象密钥的字符串</param>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.#ctor(System.Boolean)">
            <summary>
            通过一个RSA密钥文件创建RSA加密对象
            </summary>
            <param name="useDefaultKeyFile">是否通过默认密钥文件创建RSA加密对象。如果为false，则使用默认的密钥字符串创建RSA对象</param>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.#ctor(System.Boolean,System.String)">
            <summary>
            通过一个RSA密钥文件创建RSA加密对象
            </summary>
            <param name="useKeyFile">是否通过一个密钥文件创建RSA加密对象</param>
            <param name="keyFileNameOrXmlString">密钥文件绝对路径（如：Server.MapPath("~/App_Data/rsakey_private.xml")）或密钥XML字符串</param>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.ExportParameters(System.Boolean)">
            <summary>
            取得RSAParameters对象
            </summary>
            <param name="includePrivateParameters">是否包含private参数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.InitCrypto(System.String)">
            <summary>
            通过密钥文件初始化RSA对象
            </summary>
            <param name="keyFileName">密钥文件物理路径</param>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.InitCrypto">
            <summary>
            使用密码RSA密钥字符串创建RSA对象
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.InitCryptoByXmlString(System.String)">
            <summary>
            通过RSA密钥字符串创建RSA对象
            </summary>
            <param name="xmlString">RSA的密钥字符串</param>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.Encrypt(System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.Decrypt(System.Byte[])">
            <summary>
            RSA解密
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.DecryptStr(System.String)">
            <summary>
            解密RSA加密的字符串
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.GetKey(System.Boolean)">
            <summary>
            生成RSA对象密钥的XML字符串
            </summary>
            <param name="includePrivateParameters">是否</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.GetKeyFile">
            <summary>
            生成RSA对象密钥的XML文件
            会在~/App_Data/目录下生成rsakey_private.xml和rsakey_public.xml文件
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.GetRSA_E">
            <summary>
            加密指数
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.GetRSA_M">
            <summary>
            加密系数
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.GetRSA_E(System.Security.Cryptography.RSAParameters)">
            <summary>
            加密指数
            </summary>
            <param name="param">RSA算法的标准参数</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.RSACrypto.GetRSA_M(System.Security.Cryptography.RSAParameters)">
            <summary>
            加密系数
            </summary>
            <param name="param">RSA算法的标准参数</param>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.SHA">
            <summary>
            SHA加密类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.SHA.HMACSHA256Base64(System.String,System.String)">
            <summary>
            HMAC方式的SHA256加密（Base64）
            </summary>
            <param name="source">待加密的内容</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.SHA.HMACSHA256Hex(System.String,System.String)">
            <summary>
            HMAC方式的SHA256加密（小写十六进制）
            </summary>
            <param name="source">待加密的内容</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.SHA.SHA256Base64(System.String)">
            <summary>
            SHA256加密（Base64）
            </summary>
            <param name="source">待加密的内容</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.SHA.SHA256Hex(System.String)">
            <summary>
            SHA256加密（小写十六进制）
            </summary>
            <param name="source">待加密的内容</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.ToPinYin(System.String)">
            <summary>汉字转换成全拼的拼音</summary>
            <param name="Chstr">汉字字符串</param>
            <returns>转换后的拼音字符串</returns> 
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.ToBase64(System.Byte[])">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.FromBase64(System.String)">
            <summary>
            
            </summary>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.Base64Encode(System.String)">
            <summary>
            BASE64编码（UTF-8）
            </summary>
            <param name="text">待编码的内容</param>
            <returns>编码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.Base64Decode(System.String)">
            <summary>
            BASE64解码（UTF-8）
            </summary>
            <param name="base64Text">待解码的内容</param>
            <returns>解码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.UriEncode(System.String,System.Boolean)">
            <summary>
            URI编码
            </summary>
            <param name="input">待编码的内容</param>
            <param name="encodeSlash">是否对/进行编辑</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.URLSafeBase64Encode(System.String)">
            <summary>
            URL安全的Base64编码
            </summary>
            <param name="text">待编码的内容</param>
            <returns>编码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.URLSafeBase64Decode(System.String)">
            <summary>
            URL安全的Base64解码
            </summary>
            <param name="UrlBase64">待解码的内容</param>
            <returns>解码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.URLSafeEncode(System.String)">
            <summary>
            对URL参数值的特殊字符+/=进行安全转码，以防传输过程中丢失
            </summary>
            <param name="text">待编码的内容</param>
            <returns>编码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.URLSafeDecode(System.String)">
            <summary>
            解码对URL参数值的特殊字符+/=进行安全转码
            </summary>
            <param name="text">待解码的内容</param>
            <returns>解码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.Reverse(System.String)">
            <summary>
            字符串反转
            </summary>
            <param name="text">要反转的字符串</param>
            <returns>反转后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.ToHttps(System.String)">
            <summary>
            将字符串中的http://替换为//
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.ToHttpsImg(System.String)">
            <summary>
            替换掉带有51sole域名的 img标签内的 http:
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.StringHelper.ToHttpsContent(System.String)">
            <summary>
            替换掉信息内容里带有51sole域名的 img标签内的 http:
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.SysHelper.Shutdown">
            <summary>
            关闭Windows操作系统
            </summary>
        </member>
        <member name="T:_51Sole.DJG.Common.TimeHelper">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.TimeHelper.GetTimeStamp(System.DateTime,System.Int32)">
            <summary>
            获取时间戳
            </summary>
            <returns>默认返回13位时间戳（毫秒），可指定返回10位时间戳（秒）</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.TimeHelper.ConvertDateTimeToInt(System.DateTime)">
            <summary>  
            将c# DateTime时间格式转换为Unix时间戳格式  
            </summary>  
            <param name="time">时间</param>  
            <returns>long</returns>  
        </member>
        <member name="M:_51Sole.DJG.Common.TimeHelper.ConvertStringToDateTime(System.String)">
            <summary>        
            时间戳转为C#格式时间        
            </summary>        
            <param name="timeStamp">13位时间戳</param>        
            <returns></returns>        
        </member>
        <member name="M:_51Sole.DJG.Common.TimeHelper.GetDateTimeFrom1970Ticks(System.Int64)">
            <summary>
            时间戳转为C#格式时间（秒）
            </summary>
            <param name="timeStamp">10位Unix时间戳格式</param>
            <returns>C#格式时间</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.TimeHelper.IsTime(System.Int64,System.Double)">
            <summary>
            验证时间戳（分钟）
            </summary>
            <param name="time">10位时间戳</param>
            <param name="interval">差值（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.TimeHelper.IsTime(System.String)">
            <summary>
            验证时间戳是否正确（验证前8位）
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.UpLoadValidator">
            <summary>
            上传校验类
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.UpLoadValidator.arrCsvExt">
            <summary>
            { ".csv" }
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.UpLoadValidator.arrImageExt">
            <summary>
            { ".jpg", ".jpeg", ".gif", ".png", ".bmp" }
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.UpLoadValidator.arrRarExt">
            <summary>
            { ".rar", ".zip", ".7z" }
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.UpLoadValidator.arrMediaExt">
            <summary>
            { ".avi", ".rm", ".mp4", ".asf", ".wmv", ".bat", ".mov", ".flv", ".mpg", ".mpeg", ".vob", ".vcd", ".dvd", ".rmvb" }
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.UpLoadValidator.arrFileExt">
            <summary>
            { ".csv", ".jpg", ".jpeg", ".gif", ".png", ".bmp", ".rar", ".zip", ".7z", ".avi", ".rm", ".mp4", ".asf", ".wmv", ".bat", ".mov", ".flv", ".mpg", ".mpeg", ".vob", ".vcd", ".dvd", ".rmvb", ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".txt" }
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.UpLoadValidator.FormatFileSize(System.Int64)">
            <summary>
            文件大小格式化显示
            </summary>
            <param name="fSize">文件大小，Byte为单位</param>
            <returns>格式化后的文件大小</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.UpLoadValidator.Validator(System.Web.UI.WebControls.FileUpload,System.Int64,System.String[],System.Boolean,System.String@)">
            <summary>
            上传校验
            </summary>
            <param name="control"></param>
            <param name="MaxLength"></param>
            <param name="arr"></param>
            <param name="isImage"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.UpLoadValidator.Validator(System.Web.HttpPostedFile,System.Int64,System.String[],System.Boolean,System.String@)">
            <summary>
            上传校验
            </summary>
            <param name="control"></param>
            <param name="MaxLength"></param>
            <param name="arr"></param>
            <param name="isImage"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.UpLoadValidator.Validator(System.Web.UI.HtmlControls.HtmlInputFile,System.Int64,System.String[],System.Boolean,System.String@)">
            <summary>
            上传校验
            </summary>
            <param name="control"></param>
            <param name="MaxLength"></param>
            <param name="arr"></param>
            <param name="isImage"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.UpLoadValidator.IsImage(System.String)">
            <summary>
            判断文件是否为图片
            </summary>
            <param name="path">文件的完整路径</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.UpLoadValidator.IsImage(System.IO.Stream)">
            <summary>
            判断上传的文件流是否为图片
            </summary>
            <param name="stream">文件流</param>
            <returns>返回结果</returns>
        </member>
        <member name="T:_51Sole.DJG.Common.Ut">
             <summary>
            常用公用函数库
             </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.WriteJs(System.String,System.Boolean)">
            <summary>
            输出一段JS脚本
            </summary>
            <param name="message">要输出的JS内容</param>
            <param name="endResponse">是否中止页面程序</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GoBack">
             <summary>
            返回上页
             </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Alert(System.String)">
            <summary>
            弹出js提示框，并中止程序
            </summary>
            <param name="message">弹出的信息内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Alert(System.String,System.String,System.Boolean)">
            <summary>
            弹出提示框并重定向页面 可指定是否顶级重定向
            </summary>
            <param name="message">弹出的信息内容</param>
            <param name="url">要重定向的网址</param>
            <param name="bTop">是否顶级重定向</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Alert(System.String,System.String,System.Int32)">
            <summary>
            弹出提示框并定时重定向页面
            </summary>
            <param name="message">弹出的信息内容</param>
            <param name="url">要重定向的网址</param>
            <param name="iTime">延迟时间（单位：毫秒）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.AlertBack(System.String)">
            <summary>
            弹出提示框并返回上页
            </summary>
            <param name="message">弹出的信息内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.AlertClose(System.String)">
            <summary>
            弹出提示框并关闭当前页
            </summary>
            <param name="message">弹出的信息内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.AlertAsk(System.String,System.String)">
            <summary>
            弹出确认框 是：重定向页面 否：返回上一页即后退一页
            </summary>
            <param name="message">弹出的信息内容</param>
            <param name="okurl">确定后加载的页面</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.AlertAsk(System.String,System.String,System.String)">
            <summary>
            弹出确认框 是：重定向页面 否：重定向页面
            </summary>
            <param name="message">弹出的信息内容</param>
            <param name="okurl">确定后加载的页面</param>
            <param name="cancelurl">取消后加载的页面</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Redirect(System.String,System.Boolean)">
            <summary>
            重定向页面
            </summary>
            <param name="url">转向地址url</param>
            <param name="bTop">是否在顶窗口重定向</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Redirect(System.String,System.Boolean,System.Int32)">
            <summary>
            定时重定向页面
            </summary>
            <param name="url">转向地址url</param>
            <param name="bTop">是否在顶窗口重定向</param>
            <param name="iTime">延迟时间（单位：毫秒）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.WriteJs(System.Web.UI.Page,System.String)">
            <summary>
            在<body>与</body>之间输出一段JS脚本
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="js">要输出的JS内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Alert(System.Web.UI.Page,System.String)">
            <summary>
            在<body>与</body>之间弹出js提示框
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Alert(System.Web.UI.Page,System.String,System.String,System.Boolean)">
            <summary>
            在<body>与</body>之间弹出提示框并重定向页面 可指定是否顶级重定向
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
            <param name="url">要重定向的网址</param>
            <param name="bTop">是否顶级重定向</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Alert(System.Web.UI.Page,System.String,System.String,System.Int32)">
            <summary>
            在<body>与</body>之间弹出提示框并定时重定向页面
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
            <param name="url">要重定向的网址</param>
            <param name="iTime">延迟时间（单位：毫秒）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.AlertBack(System.Web.UI.Page,System.String)">
            <summary>
            在<body>与</body>之间弹出提示框并返回上页
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.AlertClose(System.Web.UI.Page,System.String)">
            <summary>
            在<body>与</body>之间弹出提示框并关闭当前页
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.AlertAsk(System.Web.UI.Page,System.String,System.String)">
            <summary>
            在<body>与</body>之间弹出确认框 是：重定向页面 否：返回上一页即后退一页
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
            <param name="okurl">确定后加载的页面</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.AlertAsk(System.Web.UI.Page,System.String,System.String,System.String)">
            <summary>
            在<body>与</body>之间弹出确认框 是：重定向页面 否：重定向页面
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
            <param name="okurl">确定后加载的页面</param>
            <param name="cancelurl">取消后加载的页面</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Redirect(System.Web.UI.Page,System.String,System.Boolean)">
            <summary>
            在<body>与</body>之间重定向页面
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="url">转向地址url</param>
            <param name="bTop">是否在顶窗口重定向</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Redirect(System.Web.UI.Page,System.String,System.Boolean,System.Int32)">
            <summary>
            在<body>与</body>之间定时重定向页面
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="url">转向地址url</param>
            <param name="bTop">是否在顶窗口重定向</param>
            <param name="iTime">延迟时间（单位：毫秒）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.RegTest(System.String,System.String)">
            <summary>
            正则验证
            </summary>
            <param name="src">要验证的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>是否成功通过正则验证</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.RegTestIgnoreCase(System.String,System.String)">
            <summary>
            不区分大小写正则验证
            </summary>
            <param name="src">要验证的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>是否成功通过正则验证</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Split(System.String,System.String)">
            <summary>
            正则分割字符串
            </summary>
            <param name="src">要分割的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>分割后得到的字符数组</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Left(System.String,System.Int32)">
            <summary>
            截取指定字符串左边指定长度的字符串
            </summary>
            <param name="sSource"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Right(System.String,System.Int32)">
            <summary>
            截取指定字符串右边指定长度的字符串
            </summary>
            <param name="sSource"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.CutString(System.String,System.String,System.String)">
            <summary>
            截取字符串中两个字符串之间的字符串
            </summary>
            <param name="str">字符串</param>
            <param name="startStr">开始字符串</param>
            <param name="endStr">结束字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DobuleNum(System.Int32)">
            <summary>
            格式化一个数字为两位字符，不足两位前面补0
            </summary>
            <param name="iNum">要格式化的数字</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.RegExec(System.String,System.String)">
            <summary>
            正则包含查找
            </summary>
            <param name="src">查找源</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>是否包含匹配正则的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.RegExecIgnoreCase(System.String,System.String)">
            <summary>
            不区分大小写正则包含查找
            </summary>
            <param name="src">查找源</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>是否包含匹配正则的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.MatchByGroupName(System.String,System.String,System.String)">
            <summary>
            通过正则分组名称提取字符
            </summary>
            <param name="src">供提取的内容</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="groupName">要返回的GroupName</param>
            <returns>GroupName对应的匹配值</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.MatchesGroupList(System.String,System.String)">
            <summary>
            带分组正则提取字符
            </summary>
            <param name="src">供提取的内容</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns><![CDATA[List<GroupCollection>]]></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.MatchesGroup(System.String,System.String)">
            <summary>
            带分组正则提取字符
            </summary>
            <param name="src">供提取的内容</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns><![CDATA[List<string[]>]]></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.MatchesGroupIgnoreCase(System.String,System.String)">
            <summary>
            不区分大小写带分组正则提取字符
            </summary>
            <param name="src">供提取的内容</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns><![CDATA[List<string[]>]]></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Matches(System.String,System.String)">
            <summary>
            正则提取字符
            </summary>
            <param name="src">供提取的内容</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>提取到的字符串列表对象</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.MatchesIgnoreCase(System.String,System.String)">
            <summary>
            不区分大小写正则提取字符
            </summary>
            <param name="src">供提取的内容</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>提取到的字符串列表对象</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Replace(System.String,System.String,System.String)">
            <summary>
             普通替换字符串
            </summary>
            <param name="src">源字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="replacement">替换字符串</param>
            <returns>已修改的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
             正则替换字符串
            </summary>
            <param name="src">要修改的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="replacement">替换字符串（子项写法：$0、$1）</param>
            <param name="options">匹配模式</param>
            <returns>已修改的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            不区分大小写替换字符串
            </summary>
            <param name="src">源字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="replacement">替换字符串</param>
            <returns>已修改的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ReplaceIgnoreCaseMultiline(System.String,System.String,System.String)">
            <summary>
            不区分大小写多行匹配替换字符串
            </summary>
            <param name="src">源字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="replacement">替换字符串</param>
            <returns>已修改的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Drop(System.String,System.String)">
            <summary>
            删除字符串中指定的内容
            </summary>
            <param name="src">要修改的字符串</param>
            <param name="pattern">要删除的正则表达式模式</param>
            <returns>已删除指定内容的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Drop(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            删除字符串中指定的内容
            </summary>
            <param name="src">要修改的字符串</param>
            <param name="pattern">要删除的正则表达式模式</param>
            <param name="options">匹配模式</param>
            <returns>已删除指定内容的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DropIgnoreCase(System.String,System.String)">
            <summary>
            删除字符串中指定的内容,不区分大小写
            </summary>
            <param name="src">要修改的字符串</param>
            <param name="pattern">要删除的正则表达式模式</param>
            <returns>已删除指定内容的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DropIgnoreCaseMultiline(System.String,System.String)">
            <summary>
            删除字符串中指定的内容,不区分大小写、多行匹配
            </summary>
            <param name="src">要修改的字符串</param>
            <param name="pattern">要删除的正则表达式模式</param>
            <returns>已删除指定内容的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ToSQL(System.String)">
            <summary>
            替换字符串中的单引号为两个单引号
            </summary>
            <param name="src">待插入数据库的字符串</param>
            <returns>可插入数据库的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ToSQLForLike(System.String)">
            <summary>
            为like语句条件做替换
            </summary>
            <param name="src">待查询的字符串</param>
            <returns>用于like查询的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.SqlNull(System.Object)">
            <summary>
            将NULL对象转换为DBNull
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ToFormatString(System.String)">
            <summary>
            将字符串转换成安全的用于string.Format的字符串
            </summary>
            <param name="src">要转换的字符串</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:_51Sole.DJG.Common.Ut.ToJson(System.String)" -->
        <member name="M:_51Sole.DJG.Common.Ut.ToSBC(System.String)">
             <summary>
             半角转全角(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ToDBC(System.String)">
             <summary>
             全角转半角(DBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.EscapeHtml(System.String)">
            <summary>
            转换HTML标签为Web页可见内容
            </summary>
            <param name="src">要转换的内容</param>
            <returns>转换后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.HtmlEncode(System.String)">
            <summary>
            HTML编码
            </summary>
            <param name="src">要格式化的字符串</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.HtmlEncodeWithOutNbsp(System.String)">
            <summary>
            用于单行文本的HTML编码（除空格以外）
            </summary>
            <param name="src">要格式化的字符串</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.UrlTextEncode(System.String)">
            <summary>
            URL字符串安全过滤编码
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.HtmlDecode(System.String)">
            <summary>
            HTML解码
            </summary>
            <param name="src">要格式化的字符串</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.HtmlDecode2(System.String)">
            <summary>
            HTML解码 转成全角符号
            </summary>
            <param name="src">要格式化的字符串</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.EncodeText(System.String)">
            <summary>
            格式化普通文本
            </summary>
            <param name="src">输入的文本</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.EncodeTitleText(System.String)">
            <summary>
            格式化标题类的文本
            </summary>
            <param name="src">输入的文本</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.EncodeUrlText(System.String)">
            <summary>
            格式化Url类文本
            </summary>
            <param name="src">输入的文本</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.InputEncode(System.String,System.Int32)">
            <summary>
            格式化输入的文本
            </summary>
            <param name="src">输入的文本</param>
            <param name="type">文本的类型（0 普通文本，1 标题类文本，2 Url类文本）</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DecodeText(System.String)">
            <summary>
            格式化普通文本
            </summary>
            <param name="src">输入的文本</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DecodeTitleText(System.String)">
            <summary>
            格式化标题类的文本
            </summary>
            <param name="src">输入的文本</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DecodeUrlText(System.String)">
            <summary>
            格式化Url类文本
            </summary>
            <param name="src">输入的文本</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.OutputEncode(System.String,System.Int32)">
            <summary>
            把经过安全过滤的客户端内容还原
            </summary>
            <param name="src">要还原的内容</param>
            <param name="type">0：Text，1：TitleText，2：Url</param>
            <returns>还原后的内容，可以直接显示到前端输入框中</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.WapEncode(System.String)">
            <summary>
            WAP编码
            </summary>
            <param name="src">要格式化的字符串</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.WapDecode(System.String)">
            <summary>
            WAP解编
            </summary>
            <param name="src">要格式化的字符串</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Md5(System.String)">
            <summary>
            32位MD5加密
            </summary>
            <param name="src">待加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Md516(System.String)">
            <summary>
            16位MD5加密
            </summary>
            <param name="src">待加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.SHA1(System.String)">
            <summary>
            SHA1加密
            </summary>
            <param name="src">待加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetMD5Hash(System.String)">
            <summary>
            获取指定字符串的MD5合法校验哈希值
            </summary>
            <param name="src">待加密的字符串</param>
            <returns>字符串的MD5合法校验哈希值</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetMD5Hash(System.String,System.String)">
            <summary>
            获取指定字符串的MD5合法校验哈希值
            </summary>
            <param name="src">待加密的字符串</param>
            <param name="key">加密密钥</param>
            <returns>字符串的MD5合法校验哈希值</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetMD5HashFromFile(System.String)">
            <summary>
            获取文件MD5哈希值
            </summary>
            <param name="fileName">文件的物理路径</param>
            <returns>文件的MD5哈希值</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.UrlEncode(System.String)">
            <summary>
            UrlEncode编码
            </summary>
            <param name="srcText">待编码的文本</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            UrlEncode编码
            </summary>
            <param name="srcText">待编码的文本</param>
            <param name="encoding">字符编码</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.UrlDecode(System.String)">
            <summary>
            UrlDecode解码
            </summary>
            <param name="srcText">待解码的文本</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            UrlDecode解码
            </summary>
            <param name="srcText">待解码的文本</param>
            <param name="encoding">字符编码</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.EnUnicode(System.String)">
            <summary>
            UrlEncode编码
            </summary>
            <param name="srcText">待编码的文本</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DeUnicode(System.String)">
            <summary>
            Unicode解码
            </summary>
            <param name="srcText">待解码的文本</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.FormatBankCard(System.String)">
            <summary>
            格式化银行卡号（输入：6236682280000938，输出格式：6236 6822 8000 0938）
            </summary>
            <param name="BankCard">要格式化的银行卡号</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.FormatFileSize(System.Int64)">
            <summary>
            文件大小格式化显示
            </summary>
            <param name="fSize">文件大小，Byte为单位</param>
            <returns>格式化后的文件大小</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.CheckMaxLen(System.String,System.Int32)">
            <summary>
            判断字符串是否在指定长度以内（一个中文算2个长度）
            </summary>
            <param name="str">要判断的字符串</param>
            <param name="maxLength">最大长度</param>
            <returns>如果在指定最大长度以内，则返回true，否则false</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetStr(System.String,System.Int32,System.String)">
            <summary>
            截取指定长度的字符（一个中文算2个长度）
            </summary>
            <param name="text">要截取的字符</param>
            <param name="length">要截取的长度（包含字符被截断时的后缀长度）</param>
            <param name="suffix">当字符被截断时，要输出的后缀</param>
            <returns>截取到的字符</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetTextLength(System.String)">
            <summary>  
            计算文本长度，区分中英文字符，中文算两个长度，英文算一个长度
            </summary>
            <param name="text">需计算长度的字符串</param>
            <returns>int</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ToUTF8(System.String)">
            <summary>
            将一个字符串转换成一个UTF-8编码的字符串
            </summary>
            <param name="str">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Reverse(System.String)">
            <summary>
            字符串反转
            </summary>
            <param name="text">要反转的字符串</param>
            <returns>反转后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Base64Encode(System.String)">
            <summary>
            BASE64编码（UTF-8）
            </summary>
            <param name="text">待编码的内容</param>
            <returns>编码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Base64Decode(System.String)">
            <summary>
            BASE64解码（UTF-8）
            </summary>
            <param name="base64Text">待解码的内容</param>
            <returns>解码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.URLSafeBase64Encode(System.String)">
            <summary>
            URL安全的Base64编码
            </summary>
            <param name="text">待编码的内容</param>
            <returns>编码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.URLSafeBase64Decode(System.String)">
            <summary>
            URL安全的Base64解码
            </summary>
            <param name="UrlBase64">待解码的内容</param>
            <returns>解码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ToDateTimeString(System.Object,_51Sole.DJG.Common.DateTimeFormat,System.String)">
            <summary>
            DateTime类型转换为日期字符串（当o为null或DBNull时，返回默认值）
            </summary>
            <param name="o"></param>
            <param name="dateTimeFormat">格式</param>
            <param name="defaultValue">当o为null或DBNull时，要返回默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ToDate(System.Object)">
            <summary>
            转为短日期
            </summary>
            <param name="o">要转换的日期对象</param>
            <returns>yyyy-MM-dd 或 ""</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ToDate(System.Object,System.String)">
            <summary>
            转为短日期
            </summary>
            <param name="o">要转换的日期对象</param>
            <param name="defaultValue">默认值</param>
            <returns>yyyy-MM-dd 或 defaultValue</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ToDateTime(System.Object)">
            <summary>
            转为短日期时间
            </summary>
            <param name="o">要转换的日期对象</param>
            <returns>yyyy-MM-dd HH:mm:ss 或 ""</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ToDateTime(System.Object,System.String)">
            <summary>
            转为短日期时间
            </summary>
            <param name="o">要转换的日期对象</param>
            <param name="defaultValue">默认值</param>
            <returns>yyyy-MM-dd HH:mm:ss 或 defaultValue</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IsNumeric(System.String)">
            <summary>
            判断是否为数字
            </summary>
            <param name="str">要判断的数据</param>
            <returns>真假结果</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IsPhone(System.String,System.Int32)">
            <summary>
            判断是否是正确的电话号码
            </summary>
            <param name="phone">要验证的号码</param>
            <param name="checkType">验证类型，0 固定电话和手机号码,1 固定电话,2 手机号码</param>
            <returns>如果是合法号码，就返回true，否则返回false</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IsMobile(System.String)">
            <summary>
            判断一个号码是不是合法的手机号码
            </summary>
            <param name="mobile">待判断的号码</param>
            <returns>true 是手机号码，false 不是手机号码</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IsEmail(System.String)">
            <summary>
            判断一个字符串是否是一个合法的Email地址
            </summary>
            <param name="email">待判断的Email地址</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IsUrl(System.String)">
            <summary>
            判断一个字符串是否是一个合法的Url
            </summary>
            <param name="url">待判断的Url地址</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IsIPAddress(System.String)">
            <summary>
            判断是否是IP地址格式 0.0.0.0
            </summary>
            <param name="ip">待判断的IP地址</param>
            <returns>true or false</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.SysTrim(System.String)">
            <summary>
            去除前后半角空格、Tab和换行符
            </summary>
            <param name="src">要处理的字符串</param>
            <returns>经过处理后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Trim(System.String)">
            <summary>
            去除前后空格、换行符
            </summary>
            <param name="src">要处理的字符串</param>
            <returns>经过处理后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DropScript(System.String)">
            <summary>
            清除所有脚本内容块
            </summary>
            <param name="src">要处理的字符串</param>
            <returns>经过处理后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DropIframe(System.String)">
            <summary>
            清除所有iframe内容块
            </summary>
            <param name="src">要处理的字符串</param>
            <returns>经过处理后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.TextFromHtml(System.String)">
            <summary>
            从HTML中获取文本,保留br,p,img
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DropHtml(System.String)">
            <summary>
            清除所有HTML标签
            </summary>
            <param name="src">要处理的字符串</param>
            <returns>经过处理后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DropHtmlTag(System.String,System.String)">
            <summary>
            去掉HTML内容中的指定的HTML标签
            </summary>
            <param name="src">HTML内容</param>
            <param name="tagName">要清除的HTML标签</param>
            <returns>去掉指定标签的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ZipHtml(System.String)">
            <summary>
            压缩HTML
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetCatchMsg(System.String,System.String)">
            <summary>
            格式化数据库错误提示信息
            </summary>
            <param name="sErrMsg">数据库操作的错误信息</param>
            <param name="sDefault">默认错误提示</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetPageDataSet(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            取得一个分页数据集
            </summary>
            <param name="connStr">数据库连接字符串</param>
            <param name="fields">要查询的字段</param>
            <param name="keyField">主键字段</param>
            <param name="table">要查询的表</param>
            <param name="where">要查询的条件</param>
            <param name="order">排序（如："ID DESC"）</param>
            <param name="pageSize">每页读取条数</param>
            <param name="pageIndex">当前查询的页码</param>
            <param name="total">返回总记录条数</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetUrlParam(System.String)">
            <summary>
            取得当前Url
            </summary>
            <param name="NPList">要排除的Url参数（格式如：,page,sid,）</param>
            <returns>当前页面的Url及参数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetCurrentUrl(System.String,System.Boolean)">
            <summary>
            取得当前Url
            </summary>
            <param name="NPList">要排除的Url参数（格式如：,page,sid,）</param>
            <param name="FullUrl">是否返回完整的Url（即返回的Url是否带上域名）</param>
            <returns>当前页面的Url及参数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetCurrentUrl(System.String,System.Boolean,System.Boolean)">
            <summary>
            取得当前Url
            </summary>
            <param name="NPList">要排除的Url参数（格式如：,page,sid,）</param>
            <param name="FullUrl">是否返回完整的Url（即返回的Url是否带上域名）</param>
            <param name="ForLink">返回的参数连接符是否转义为&amp;表示</param>
            <returns>当前页面的Url及参数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetCurrentUrl(System.Boolean)">
            <summary>
            取得当前页面的完整地址
            </summary>
            <param name="withParam">是否包含Url参数</param>
            <returns>取得当前页面的完整地址</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ToLinkUrl(System.String)">
            <summary>
            <![CDATA[将普通Url转换成用于超链接的Url（即将Url中的&转义成&amp;）]]>
            </summary>
            <param name="Url">要转换的Url</param>
            <returns>用于超链接的Url</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetShopUrl(System.String,System.Int32)">
            <summary>
            取得用户商铺地址的Url前缀（需要配置名为ShopBaseDomain的AppSetting，值如：http://e.51sole.com）
            </summary>
            <param name="AccountName">用户名</param>
            <param name="DomainType">Account表的DomainType</param>
            <returns>返回格式如：http://AccountName.51sole.com/ </returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetShopUrl(System.String,System.String)">
            <summary>
            取得用户商铺地址的Url前缀（需要配置名为ShopBaseDomain的AppSetting，值如：http://e.51sole.com）
            </summary>
            <param name="ConnectionString">DeployDB库的链接字符串</param>
            <param name="AccountName">用户名</param>
            <returns>返回格式如：http://AccountName.51sole.com/ </returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetQueryString(System.String,System.String)">
            <summary>
            获取url字符串参数，返回参数值字符串
            </summary>
            <param name="name">参数名称</param>
            <param name="url">url字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.URLSafeEncode(System.String)">
            <summary>
            对URL参数值的特殊字符+/=进行安全转码，以防传输过程中丢失
            </summary>
            <param name="text">待编码的内容</param>
            <returns>编码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.URLSafeDecode(System.String)">
            <summary>
            解码对URL参数值的特殊字符+/=进行安全转码
            </summary>
            <param name="text">待解码的内容</param>
            <returns>解码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Print(System.String)">
            <summary>
            在页面上输出指定的字符内容
            </summary>
            <param name="text">要输出的内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Println(System.String)">
            <summary>
            在页面上输出指定的字符内容并换行
            </summary>
            <param name="text">要输出的内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Println(System.String,System.Boolean)">
            <summary>
            在页面上输出指定的字符内容并换行
            </summary>
            <param name="text">要输出的内容</param>
            <param name="withBR">行尾是否输出<br/></param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetConnectionString(System.String)">
            <summary>
            获取ConnectionStrings配置节中的值
            </summary>
            <param name="name">连接字符串名称</param>
            <returns>连接字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.SetConnectionStringValue(System.String,System.String)">
            <summary>
            设置ConnectionStrings配置节的值
            </summary>
            <param name="name">连接字符串名称</param>
            <param name="connectionString">连接字符串</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.SetConnectionStringValue(System.String,System.String,System.Boolean)">
            <summary>
            设置ConnectionStrings配置节的值
            </summary>
            <param name="name">连接字符串名称</param>
            <param name="connectionString">连接字符串</param>
            <param name="writeLog">当操作出错时，是否输出错误日志</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetAppSettingsKeyValue(System.String)">
            <summary>
            获取AppSettings配置节中的Key值
            </summary>
            <param name="keyName">key的名称</param>
            <returns>key的值</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.SetAppSettingsKeyValue(System.String,System.String)">
            <summary>
            设置AppSettings配置节中的Key值
            </summary>
            <param name="keyName">要设置的Key</param>
            <param name="keyValue">要设置的值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.SetAppSettingsKeyValue(System.String,System.String,System.Boolean)">
            <summary>
            设置AppSettings配置节中的Key值
            </summary>
            <param name="keyName">要设置的Key</param>
            <param name="keyValue">要设置的值</param>
            <param name="writeLog">当出错时，是否输出错误日志</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetIndustryName(System.String)">
            <summary>
            去掉行业名称中括号部分的内容
            </summary>
            <param name="IndustryName">要处理的行业名称</param>
            <returns>不含括号中内容的行业名称</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IDsIsNumber(System.String)">
            <summary>
            判断一个ID集合是否合法
            </summary>
            <param name="IDs"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.SafeIDs(System.String)">
            <summary>
            ID集合安全过滤
            </summary>
            <param name="IDs"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.HighLightString(System.String,System.String)">
            <summary>
            将字符串中的关键词做高亮处理
            </summary>
            <param name="str">要处理的字符串</param>
            <param name="keywords">要高亮的关键词，多个关键词之间用英文逗号隔开</param>
            <returns>高亮处理后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.ToCNMoney(System.String)">
            <summary>
            金额转换成中文大写金额
            </summary>
            <param name="LowerMoney">eg:10.74</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Week">
            <summary>
            取得今天是星期几
            </summary>
            <returns>如：星期一</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DayTime(System.Boolean)">
            <summary>
            取得当前时段（凌晨、早上、上午、中午、下午、傍晚、晚上）
            </summary>
            <param name="APEOlny">是否仅分为上午、下午和晚上三个时间段</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            取得两个日期之间相隔的天数
            </summary>
            <param name="dateStart">开始日期</param>
            <param name="dateEnd">结束日期</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DateDiffStr(System.DateTime,System.DateTime)">
            <summary>
            取得两个日期之间相隔的天数小时数分钟数
            </summary>
            <param name="dateStart">开始日期</param>
            <param name="dateEnd">结束日期</param>
            <returns>x天x小时x分</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.DateDiffMinute(System.DateTime,System.DateTime)">
            <summary>
            取得两个日期之间相隔的总分钟数
            </summary>
            <param name="dateStart">开始日期</param>
            <param name="dateEnd">结束日期</param>
            <returns>相差的总分钟数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.FormatMinute(System.Int32)">
            <summary>
            把分钟数格式化成“x天x小时x分”形式的字符串
            </summary>
            <param name="minute">分钟数</param>
            <returns>x天x小时x分</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.RedirectMobile(System.String)">
            <summary>
            如果访问来源是移动终端，则302重定向到指定的移动站Url
            </summary>
            <param name="mobileUrl">要跳转到的移动站Url</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IsFromMobile">
            <summary>
            判断访问来源是否是移动终端
            </summary>
            <returns>如果是移动终端，则返回true，否则返回false</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.SetPageNoCache">
            <summary>
            设置页面不被缓存
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetWebRequest(System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以GET方式请求一个网页，返回网页的HTML源码
            </summary>
            <param name="url">要请求的网页地址</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的网页HTML源码</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetWebRequest(System.String,System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以GET方式请求一个网页，返回网页的HTML源码
            </summary>
            <param name="url">要请求的网页地址</param>
            <param name="userAgent">UserAgent的内容</param>
            <param name="referer">Referer的内容</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的网页HTML源码</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.PostWebRequest(System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="postData">要提交的数据</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.PostWebRequest(System.String,System.String,System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="postData">要提交的数据</param>
            <param name="userAgent">UserAgent的内容</param>
            <param name="referer">Referer的内容</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.PostJSON(System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交JSON数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="json">要提交的JSON数据</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.PostJSON(System.String,System.String,System.Collections.Hashtable,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交JSON数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="json">要提交的JSON数据</param>
            <param name="headers">要附带的其它Header项集合</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.PostJSON(System.String,System.String,System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交JSON数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="json">要提交的JSON数据</param>
            <param name="userAgent">UserAgent的内容</param>
            <param name="referer">Referer的内容</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.PostJSON(System.String,System.String,System.String,System.String,System.Collections.Hashtable,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交JSON数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="json">要提交的JSON数据</param>
            <param name="userAgent">UserAgent的内容</param>
            <param name="referer">Referer的内容</param>
            <param name="headers">要附带的其它Header项集合</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetPostJSON">
            <summary>
            获取POST方式提交上来的JSON数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Intercept(System.String)">
            <summary>
            恶意访问拦截（默认拦截空的UA请求）
            </summary>
            <param name="connStr">DeployDB数据库的连接字符串</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Intercept(System.String,System.Boolean)">
            <summary>
            恶意访问拦截
            </summary>
            <param name="connStr">DeployDB数据库的连接字符串</param>
            <param name="BanNullUA">是否拦截空的UA</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.Intercept(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            恶意访问拦截
            </summary>
            <param name="sConnString">拦截日志数据库连接字符串</param>
            <param name="BanIP">是否拦截IP（1为拦截，0为不拦截）</param>
            <param name="BanCount">拦截频率</param>
            <param name="UnBanSecond">自动解锁频率</param>
            <param name="BanUA">是否拦截UA（1为拦截，0为不拦截）</param>
            <param name="BanUAList">UA列表，多个UA特征码之间用$隔开</param>
            <param name="ExactBanUAList">精准匹配的UA列表，多个UA之间用∫隔开</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.InterceptA(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String[])">
            <summary>
            恶意访问拦截
            </summary>
            <param name="sConnString">拦截日志数据库连接字符串</param>
            <param name="BanIP">是否拦截IP（1为拦截，0为不拦截）</param>
            <param name="BanCount">拦截频率</param>
            <param name="UnBanSecond">自动解锁频率</param>
            <param name="BanUA">是否拦截UA（1为拦截，0为不拦截）</param>
            <param name="BanUAList">UA列表，多个UA特征码之间用$隔开</param>
            <param name="arrExactBanUAList">精准匹配的UA数组</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            绑定一个DropDownList数据
            </summary>
            <param name="ddl">要绑定数据的DropDownList对象</param>
            <param name="dataValueField">绑定到DropDownList的DataValueField</param>
            <param name="dataTextField">绑定到DropDownList的DataTextField</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="tableName">数据源表名</param>
            <param name="where">数据源查询条件,如："SortID=8"</param>
            <param name="order">数据源排序，如："ID ASC"</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            绑定一个DropDownList数据
            </summary>
            <param name="ddl">要绑定数据的DropDownList对象</param>
            <param name="dataValueField">绑定到DropDownList的DataValueField</param>
            <param name="dataTextField">绑定到DropDownList的DataTextField</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="tableName">数据源表名</param>
            <param name="where">数据源查询条件,如："SortID=8"</param>
            <param name="order">数据源排序，如："ID ASC"</param>
            <param name="clearBracket">是否清除名称中的括号部分内容（针对搜了网行业名称的处理）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            绑定一个DropDownList数据
            </summary>
            <param name="ddl">要绑定数据的DropDownList对象</param>
            <param name="dataValueField">绑定到DropDownList的DataValueField</param>
            <param name="dataTextField">绑定到DropDownList的DataTextField</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="tableName">数据源表名</param>
            <param name="where">数据源查询条件,如："SortID=8"</param>
            <param name="order">数据源排序，如："ID ASC"</param>
            <param name="clearBracket">是否清除名称中的括号部分内容（针对搜了网行业名称的处理）</param>
            <param name="appendOptionText">附加选项的文本（默认做为列表的第一个选项）</param>
            <param name="appendOptionValue">附加选项的值</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String,System.String,System.String)">
            <summary>
            绑定一个DropDownList数据
            </summary>
            <param name="ddl">要绑定数据的DropDownList对象</param>
            <param name="dataTextField">绑定到DropDownList的DataTextField</param>
            <param name="dataValueField">绑定到DropDownList的DataValueField</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="sql">查询语句</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            绑定一个DropDownList数据
            </summary>
            <param name="ddl">要绑定数据的DropDownList对象</param>
            <param name="dataTextField">绑定到DropDownList的DataTextField</param>
            <param name="dataValueField">绑定到DropDownList的DataValueField</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="sql">查询语句</param>
            <param name="clearBracket">是否清除名称中的括号部分内容（针对搜了网行业名称的处理）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            绑定一个DropDownList数据
            </summary>
            <param name="ddl">要绑定数据的DropDownList对象</param>
            <param name="dataTextField">绑定到DropDownList的DataTextField</param>
            <param name="dataValueField">绑定到DropDownList的DataValueField</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="sql">查询语句</param>
            <param name="clearBracket">是否清除名称中的括号部分内容（针对搜了网行业名称的处理）</param>
            <param name="appendOptionText">附加选项的文本（默认做为列表的第一个选项）</param>
            <param name="appendOptionValue">附加选项的值</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.BindRepeater(System.Web.UI.WebControls.Repeater,System.String,System.String)">
            <summary>
            绑定Repeater数据
            </summary>
            <param name="rep">Repeater对象</param>
            <param name="connStr">数据库连接字符串</param>
            <param name="sql">查询语句</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.BindRepeater(System.Web.UI.WebControls.Repeater,System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            绑定Repeater数据
            </summary>
            <param name="rep">Repeater对象</param>
            <param name="connStr">数据库连接字符串</param>
            <param name="sql">查询语句</param>
            <param name="ps">查询参数集</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.BindRepeater(System.Web.UI.WebControls.Repeater,System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            绑定Repeater数据
            </summary>
            <param name="rep">Repeater对象</param>
            <param name="conn">数据库连接对象</param>
            <param name="sql">查询语句</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.BindRepeater(System.Web.UI.WebControls.Repeater,System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            绑定Repeater数据
            </summary>
            <param name="rep">Repeater对象</param>
            <param name="conn">数据库连接对象</param>
            <param name="sql">查询语句</param>
            <param name="ps">查询参数集</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.AD(System.String,System.Int32)">
            <summary>
            取得指定广告位的广告内容
            </summary>
            <param name="connStr">数据库连接字符串（DeployDB_EX库）</param>
            <param name="AdID">广告位ID</param>
            <returns>广告位对应的广告内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.AD(System.String,System.Int32,System.Int32)">
            <summary>
            取得指定广告位的广告内容
            </summary>
            <param name="connStr">数据库连接字符串（DeployDB_EX库）</param>
            <param name="AdID">广告位ID</param>
            <param name="AdCount">要显示的广告条数（按广告显示顺序取前AdCount条），AdCount的值小于0时将显示所有广告</param>
            <returns>广告位对应的广告内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.NewToken">
            <summary>
            生成一个新的Token
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GenerateStringID">
            <summary>
            生成一个16位长度的唯一字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GenerateIntID">
            <summary>
            生成一个19位长度的唯一数字序列
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GenerateTimeID">
            <summary>
            生成一个18长度的时间戳字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GenerateOrderID">
            <summary>
            生成一个18长度的订单号
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GenerateOrderID(System.String)">
            <summary>
            生成一个18长度的订单号
            </summary>
            <param name="prefix">前缀，支持最多3个字符</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GenerateOrderID(System.DateTime@)">
            <summary>
            生成一个18长度的订单号
            </summary>
            <param name="dateTime">和订单号一致的时间</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GenerateOrderID(System.String,System.DateTime@)">
            <summary>
            生成一个18长度的订单号
            </summary>
            <param name="prefix">前缀，支持最多3个字符</param>
            <param name="dateTime">和订单号一致的时间</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetRandomString(System.Int32,System.Int32)">
            <summary>
            生成指定长度的随机字符串
            </summary>
            <param name="num">要生成的字符串长度</param>
            <param name="type">类型（1：数字，2：大写字母，3：小字字母，4：数字/大写字母，5：数字/小写字母，6：大小写字母，7：数字/大小写字母+特殊字符，其它：数字/大小写字母）</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IP">
            <summary>
            取得客户端真实IP。如果有代理则取第一个非内网地址
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetLocalIP">
            <summary>
            取当前电脑的IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IPFrom(System.String)">
            <summary>
            取得IP来源地
            </summary>
            <param name="ipFilePath">DATX数据库的文件地址</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IPFrom(System.String,System.String)">
            <summary>
            取得IP来源地
            </summary>
            <param name="ip">IP地址</param>
            <param name="ipFilePath">DATX数据库的文件地址</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IPFrom(System.String,System.String@)">
            <summary>
            取得IP来源地址（基于百度IP查询接口）
            </summary>
            <param name="ip">要查询的IP地址，为空时将自动获取当前用户IP地址</param>
            <param name="queryIP">输出被查询的IP地址</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.GetEnumDescription(System.Enum)">
            <summary>
            取得枚举值的Description
            </summary>
            <param name="value">枚举对象，例如：ContentTypes.TextPlain</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Ut.IsFromARR(System.String)">
            <summary>
            ARR标识校验
            </summary>
            <param name="ARRKey">ARR标识值</param>
            <returns>如果校验通过，返回true，否则返回false</returns>
        </member>
        <member name="T:_51Sole.DJG.Common.WeiXinOAuthHelper">
            <summary>
            微信登录帮助类
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.WeiXinOAuthHelper.WeiXinAppID">
            <summary>
            微信登录接口的AppID
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.WeiXinOAuthHelper.WeiXinAppSecret">
            <summary>
            微信登录接口的AppSecret
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.WeiXinOAuthHelper.WeiXinCallBack">
            <summary>
            微信登录回调地址
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.WeiXinOAuthHelper.CheckState(System.String)">
            <summary>
            state合法性校验
            </summary>
            <param name="state">要检验的state值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.WeiXinOAuthHelper.ClearState">
            <summary>
            清除state的Session变量
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.WeiXinOAuthHelper.WeiXinLogin">
            <summary>
            发起微信登录，会产生一个Session["WeiXinState"]，保存state的值
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.WeiXinOAuthHelper.GetWeiXinUserInfo(System.String)">
            <summary>
            取得一个微信用户对象
            </summary>
            <param name="code">authorization code</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.WeiXinOAuthHelper.GetWeiXinUserInfo(System.String,System.Boolean)">
            <summary>
            取得一个微信用户对象
            </summary>
            <param name="code">authorization code</param>
            <param name="writeLog">是否写日志</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.WeiXinOAuthHelper.GetOauthInfo(System.String)">
            <summary>
            获取oauth信息
            </summary>
            <param name="code">authorization code</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.WeiXinOAuthHelper.GetUserInfo(System.String,System.Boolean)">
            <summary>
            取得一个微信用户信息
            </summary>
            <param name="code">authorization code</param>
            <param name="writeLog">是否写日志</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.WeiXinOAuthHelper.GetUserInfo(System.String,System.String,System.Boolean)">
            <summary>
            get_user_info
            </summary>
            <param name="access_token">授权令牌，Access_Token。</param>
            <param name="openID">用户的ID，与QQ号码一一对应。</param>
            <param name="writeLog">是否写日志</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.WeiXinOAuthHelper.CutString(System.String,System.String,System.String)">
            <summary>
            截取字符串中两个字符串中的字符串
            </summary>
            <param name="str">字符串</param>
            <param name="startStr">开始字符串</param>
            <param name="endStr">结束字符串</param>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.WeiXinOauthInfo">
            <summary>
            微信登录授权类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.WeiXinOauthInfo.#ctor">
            <summary>
            微信授权登录帮助类
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinOauthInfo.AccessToken">
            <summary>
            授权令牌，Access_Token。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinOauthInfo.ExpiresIn">
            <summary>
            该access token的有效期，单位为秒。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinOauthInfo.RefreshToken">
            <summary>
            在授权自动续期步骤中，获取新的Access_Token时需要提供的参数。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinOauthInfo.OpenID">
            <summary>
            授权用户唯一标识
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinOauthInfo.Scope">
            <summary>
            用户授权的作用域，使用逗号（,）分隔。如：snsapi_base, snsapi_userinfo
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinOauthInfo.UnionID">
            <summary>
            用户统一标识。针对一个微信开放平台帐号下的应用，同一用户的unionid是唯一的。
            </summary>
        </member>
        <member name="T:_51Sole.DJG.Common.WeiXinUserInfo">
            <summary>
            微信用户类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.WeiXinUserInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUserInfo.ErrCode">
            <summary>
            返回码，为0时代表获取微信用户信息成功
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUserInfo.ErrMsg">
            <summary>
            如果ret小于0，会有相应的错误信息提示，返回数据全部用UTF-8编码。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUserInfo.OpenID">
            <summary>
            openid是此网站上唯一对应用户身份的标识，网站可将此ID进行存储便于用户下次登录时辨识其身份，或将其与用户在网站上的原有账号进行绑定。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUserInfo.UnionID">
            <summary>
            用户统一标识。针对一个微信开放平台帐号下的应用，同一用户的unionid是唯一的。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUserInfo.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUserInfo.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUserInfo.HeadImgUrl">
            <summary>
            用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUserInfo.Province">
            <summary>
            省份
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUserInfo.City">
            <summary>
            城市
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUserInfo.Country">
            <summary>
            国家，如中国为CN
            </summary>
        </member>
        <member name="T:_51Sole.DJG.Common.WeiXinUser_Info">
            <summary>
            userinfo类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.WeiXinUser_Info.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUser_Info.errcode">
            <summary>
            返回码，为0时代表获取微信用户信息成功
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUser_Info.errmsg">
            <summary>
            如果ret小于0，会有相应的错误信息提示，返回数据全部用UTF-8编码。
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUser_Info.openid">
            <summary>
            普通用户的标识，对当前开发者帐号唯一
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUser_Info.nickname">
            <summary>
            普通用户昵称
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUser_Info.sex">
            <summary>
            普通用户性别，1为男性，2为女性
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUser_Info.province">
            <summary>
            普通用户个人资料填写的省份
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUser_Info.city">
            <summary>
            普通用户个人资料填写的城市
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUser_Info.country">
            <summary>
            国家，如中国为CN
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUser_Info.headimgurl">
            <summary>
            用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空
            </summary>
        </member>
        <member name="P:_51Sole.DJG.Common.WeiXinUser_Info.unionid">
            <summary>
            用户统一标识。针对一个微信开放平台帐号下的应用，同一用户的unionid是唯一的。
            </summary>
        </member>
        <member name="T:_51Sole.DJG.Common.ExcelUtils">
            <summary>
            Excel工具类
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.ExcelUtils.ParseDateTime(System.String)">
            <summary>
            单元格格式为日期时间，使用此方法转换为DateTime类型，若解析失败则返回‘0001-01-01’
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.ExcelUtils.TranslateToTable(System.String,System.String)">
            <summary>
            转换为DataTable(文件路径 表名)
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.ExcelUtils.TranslateToTable(System.String,System.Int32)">
            <summary>
            转换为DataTable(文件路径 表索引)
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.ExcelUtils.TranslateToTable(System.String)">
            <summary>
            转换为DataTable(文件路径)
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.ExcelUtils.TranslateToTable(System.IO.Stream,System.String)">
            <summary>
            转换为DataTable(内存流 表名)
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.ExcelUtils.TranslateToTable(System.IO.Stream,System.Int32)">
            <summary>
            转换为DataTable(内存流 表索引)
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.ExcelUtils.TranslateToTable(System.IO.Stream)">
            <summary>
            转换为DataTable(内存流)
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.ExcelUtils.ExportXMLToExcel(System.String,System.String)">
            <summary>
            将XML内容导出为Excel文件
            </summary>
            <param name="excelFileName">Excel文件名</param>
            <param name="xml">要导出的XML内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.ExcelUtils.ExportToExcel(System.String,System.String)">
            <summary>
            将HTML内容导出到Excel文件中
            </summary>
            <param name="excelFileName">Excel文件名</param>
            <param name="html">要导出的HTML内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.IPSearch.#ctor(System.String)">
            <summary>
             构造函数
            </summary>
            <param name="ipFilePath">纯真IP数据库路径</param>
        </member>
        <member name="T:_51Sole.DJG.Common.IPSearch.IPLocation">
            <summary>
             地理位置,包括国家和地区
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.IPSearch.GetIPLocation(System.String)">
            <summary>
             获取指定IP所在地理位置（IP数据不准，不再推荐使用，请使用Utility.IPFrom()方法）
            </summary>
            <param name="strIP">要查询的IP地址</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPSearch.IPToLong(System.String)">
            <summary>
             将字符串形式的IP转换为long
            </summary>
            <param name="strIP"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPSearch.BlockToArray(System.Byte[])">
            <summary>
             将索引区字节块中的起始IP转换成Long数组
            </summary>
            <param name="ipBlock"></param>
        </member>
        <member name="M:_51Sole.DJG.Common.IPSearch.SearchIP(System.Int64[],System.Int32,System.Int32)">
            <summary>
             从IP数组中搜索指定IP并返回其索引
            </summary>
            <param name="ipArray">IP数组</param>
            <param name="start">指定搜索的起始位置</param>
            <param name="end">指定搜索的结束位置</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPSearch.ReadIPBlock">
            <summary>
             读取IP文件中索引区块
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPSearch.ReadLongX(System.Int32)">
            <summary>
             从IP文件中读取指定字节并转换位long
            </summary>
            <param name="bytesCount">需要转换的字节数，主意不要超过8字节</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.IPSearch.ReadString(System.Int32)">
            <summary>
             从IP文件中读取字符串
            </summary>
            <param name="flag">转向标志</param>
            <returns></returns>
        </member>
        <member name="T:_51Sole.DJG.Common.Utility">
             <summary>
            常用公用函数库
             </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.WriteJs(System.String,System.Boolean)">
            <summary>
            输出一段JS脚本
            </summary>
            <param name="message">要输出的JS内容</param>
            <param name="endResponse">是否中止页面程序</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GoBack">
             <summary>
            返回上页
             </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Alert(System.String)">
            <summary>
            弹出js提示框，并中止程序
            </summary>
            <param name="message">弹出的信息内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Alert(System.String,System.String,System.Boolean)">
            <summary>
            弹出提示框并重定向页面 可指定是否顶级重定向
            </summary>
            <param name="message">弹出的信息内容</param>
            <param name="url">要重定向的网址</param>
            <param name="bTop">是否顶级重定向</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Alert(System.String,System.String,System.Int32)">
            <summary>
            弹出提示框并定时重定向页面
            </summary>
            <param name="message">弹出的信息内容</param>
            <param name="url">要重定向的网址</param>
            <param name="iTime">延迟时间（单位：毫秒）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.AlertBack(System.String)">
            <summary>
            弹出提示框并返回上页
            </summary>
            <param name="message">弹出的信息内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.AlertClose(System.String)">
            <summary>
            弹出提示框并关闭当前页
            </summary>
            <param name="message">弹出的信息内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.AlertAsk(System.String,System.String)">
            <summary>
            弹出确认框 是：重定向页面 否：返回上一页即后退一页
            </summary>
            <param name="message">弹出的信息内容</param>
            <param name="okurl">确定后加载的页面</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.AlertAsk(System.String,System.String,System.String)">
            <summary>
            弹出确认框 是：重定向页面 否：重定向页面
            </summary>
            <param name="message">弹出的信息内容</param>
            <param name="okurl">确定后加载的页面</param>
            <param name="cancelurl">取消后加载的页面</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Redirect(System.String,System.Boolean)">
            <summary>
            重定向页面
            </summary>
            <param name="url">转向地址url</param>
            <param name="bTop">是否在顶窗口重定向</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Redirect(System.String,System.Boolean,System.Int32)">
            <summary>
            定时重定向页面
            </summary>
            <param name="url">转向地址url</param>
            <param name="bTop">是否在顶窗口重定向</param>
            <param name="iTime">延迟时间（单位：毫秒）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.WriteJs(System.Web.UI.Page,System.String)">
            <summary>
            在<body>与</body>之间输出一段JS脚本
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="js">要输出的JS内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Alert(System.Web.UI.Page,System.String)">
            <summary>
            在<body>与</body>之间弹出js提示框
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Alert(System.Web.UI.Page,System.String,System.String,System.Boolean)">
            <summary>
            在<body>与</body>之间弹出提示框并重定向页面 可指定是否顶级重定向
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
            <param name="url">要重定向的网址</param>
            <param name="bTop">是否顶级重定向</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Alert(System.Web.UI.Page,System.String,System.String,System.Int32)">
            <summary>
            在<body>与</body>之间弹出提示框并定时重定向页面
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
            <param name="url">要重定向的网址</param>
            <param name="iTime">延迟时间（单位：毫秒）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.AlertBack(System.Web.UI.Page,System.String)">
            <summary>
            在<body>与</body>之间弹出提示框并返回上页
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.AlertClose(System.Web.UI.Page,System.String)">
            <summary>
            在<body>与</body>之间弹出提示框并关闭当前页
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.AlertAsk(System.Web.UI.Page,System.String,System.String)">
            <summary>
            在<body>与</body>之间弹出确认框 是：重定向页面 否：返回上一页即后退一页
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
            <param name="okurl">确定后加载的页面</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.AlertAsk(System.Web.UI.Page,System.String,System.String,System.String)">
            <summary>
            在<body>与</body>之间弹出确认框 是：重定向页面 否：重定向页面
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="message">弹出的信息内容</param>
            <param name="okurl">确定后加载的页面</param>
            <param name="cancelurl">取消后加载的页面</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Redirect(System.Web.UI.Page,System.String,System.Boolean)">
            <summary>
            在<body>与</body>之间重定向页面
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="url">转向地址url</param>
            <param name="bTop">是否在顶窗口重定向</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Redirect(System.Web.UI.Page,System.String,System.Boolean,System.Int32)">
            <summary>
            在<body>与</body>之间定时重定向页面
            </summary>
            <param name="page">要输出脚本的页面对象</param>
            <param name="url">转向地址url</param>
            <param name="bTop">是否在顶窗口重定向</param>
            <param name="iTime">延迟时间（单位：毫秒）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.RegTest(System.String,System.String)">
            <summary>
            正则验证
            </summary>
            <param name="src">要验证的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>是否成功通过正则验证</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.RegTestIgnoreCase(System.String,System.String)">
            <summary>
            不区分大小写正则验证
            </summary>
            <param name="src">要验证的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>是否成功通过正则验证</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Split(System.String,System.String)">
            <summary>
            正则分割字符串
            </summary>
            <param name="src">要分割的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>分割后得到的字符数组</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Left(System.String,System.Int32)">
            <summary>
            截取指定字符串左边指定长度的字符串
            </summary>
            <param name="sSource"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Right(System.String,System.Int32)">
            <summary>
            截取指定字符串右边指定长度的字符串
            </summary>
            <param name="sSource"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.CutString(System.String,System.String,System.String)">
            <summary>
            截取字符串中两个字符串之间的字符串
            </summary>
            <param name="str">字符串</param>
            <param name="startStr">开始字符串</param>
            <param name="endStr">结束字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DobuleNum(System.Int32)">
            <summary>
            格式化一个数字为两位字符，不足两位前面补0
            </summary>
            <param name="iNum">要格式化的数字</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.RegExec(System.String,System.String)">
            <summary>
            正则包含查找
            </summary>
            <param name="src">查找源</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>是否包含匹配正则的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.RegExecIgnoreCase(System.String,System.String)">
            <summary>
            不区分大小写正则包含查找
            </summary>
            <param name="src">查找源</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>是否包含匹配正则的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.MatchByGroupName(System.String,System.String,System.String)">
            <summary>
            通过正则分组名称提取字符
            </summary>
            <param name="src">供提取的内容</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="groupName">要返回的GroupName</param>
            <returns>GroupName对应的匹配值</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.MatchesGroupList(System.String,System.String)">
            <summary>
            带分组正则提取字符
            </summary>
            <param name="src">供提取的内容</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns><![CDATA[List<GroupCollection>]]></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.MatchesGroup(System.String,System.String)">
            <summary>
            带分组正则提取字符
            </summary>
            <param name="src">供提取的内容</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns><![CDATA[List<string[]>]]></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.MatchesGroupIgnoreCase(System.String,System.String)">
            <summary>
            不区分大小写带分组正则提取字符
            </summary>
            <param name="src">供提取的内容</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns><![CDATA[List<string[]>]]></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Matches(System.String,System.String)">
            <summary>
            正则提取字符
            </summary>
            <param name="src">供提取的内容</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>提取到的字符串列表对象</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.MatchesIgnoreCase(System.String,System.String)">
            <summary>
            不区分大小写正则提取字符
            </summary>
            <param name="src">供提取的内容</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>提取到的字符串列表对象</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Replace(System.String,System.String,System.String)">
            <summary>
             普通替换字符串
            </summary>
            <param name="src">源字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="replacement">替换字符串</param>
            <returns>已修改的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
             正则替换字符串
            </summary>
            <param name="src">要修改的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="replacement">替换字符串（子项写法：$0、$1）</param>
            <param name="options">匹配模式</param>
            <returns>已修改的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            不区分大小写替换字符串
            </summary>
            <param name="src">源字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="replacement">替换字符串</param>
            <returns>已修改的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ReplaceIgnoreCaseMultiline(System.String,System.String,System.String)">
            <summary>
            不区分大小写多行匹配替换字符串
            </summary>
            <param name="src">源字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="replacement">替换字符串</param>
            <returns>已修改的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Drop(System.String,System.String)">
            <summary>
            删除字符串中指定的内容
            </summary>
            <param name="src">要修改的字符串</param>
            <param name="pattern">要删除的正则表达式模式</param>
            <returns>已删除指定内容的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Drop(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            删除字符串中指定的内容
            </summary>
            <param name="src">要修改的字符串</param>
            <param name="pattern">要删除的正则表达式模式</param>
            <param name="options">匹配模式</param>
            <returns>已删除指定内容的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DropIgnoreCase(System.String,System.String)">
            <summary>
            删除字符串中指定的内容,不区分大小写
            </summary>
            <param name="src">要修改的字符串</param>
            <param name="pattern">要删除的正则表达式模式</param>
            <returns>已删除指定内容的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DropIgnoreCaseMultiline(System.String,System.String)">
            <summary>
            删除字符串中指定的内容,不区分大小写、多行匹配
            </summary>
            <param name="src">要修改的字符串</param>
            <param name="pattern">要删除的正则表达式模式</param>
            <returns>已删除指定内容的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ToSQL(System.String)">
            <summary>
            替换字符串中的单引号为两个单引号
            </summary>
            <param name="src">待插入数据库的字符串</param>
            <returns>可插入数据库的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ToSQLForLike(System.String)">
            <summary>
            为like语句条件做替换
            </summary>
            <param name="src">待查询的字符串</param>
            <returns>用于like查询的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.SqlNull(System.Object)">
            <summary>
            将NULL对象转换为DBNull
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ToFormatString(System.String)">
            <summary>
            将字符串转换成安全的用于string.Format的字符串
            </summary>
            <param name="src">要转换的字符串</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:_51Sole.DJG.Common.Utility.ToJson(System.String)" -->
        <member name="M:_51Sole.DJG.Common.Utility.ToSBC(System.String)">
             <summary>
             半角转全角(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ToDBC(System.String)">
             <summary>
             全角转半角(DBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.EscapeHtml(System.String)">
            <summary>
            转换HTML标签为Web页可见内容
            </summary>
            <param name="src">要转换的内容</param>
            <returns>转换后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.HtmlEncode(System.String)">
            <summary>
            HTML编码
            </summary>
            <param name="src">要格式化的字符串</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.HtmlEncodeWithOutNbsp(System.String)">
            <summary>
            用于单行文本的HTML编码（除空格以外）
            </summary>
            <param name="src">要格式化的字符串</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.UrlTextEncode(System.String)">
            <summary>
            URL字符串安全过滤编码
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.HtmlDecode(System.String)">
            <summary>
            HTML解码
            </summary>
            <param name="src">要格式化的字符串</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.HtmlDecode2(System.String)">
            <summary>
            HTML解码 转成全角符号
            </summary>
            <param name="src">要格式化的字符串</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.EncodeText(System.String)">
            <summary>
            格式化普通文本
            </summary>
            <param name="src">输入的文本</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.EncodeTitleText(System.String)">
            <summary>
            格式化标题类的文本
            </summary>
            <param name="src">输入的文本</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.EncodeUrlText(System.String)">
            <summary>
            格式化Url类文本
            </summary>
            <param name="src">输入的文本</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.InputEncode(System.String,System.Int32)">
            <summary>
            格式化输入的文本
            </summary>
            <param name="src">输入的文本</param>
            <param name="type">文本的类型（0 普通文本，1 标题类文本，2 Url类文本）</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DecodeText(System.String)">
            <summary>
            格式化普通文本
            </summary>
            <param name="src">输入的文本</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DecodeTitleText(System.String)">
            <summary>
            格式化标题类的文本
            </summary>
            <param name="src">输入的文本</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DecodeUrlText(System.String)">
            <summary>
            格式化Url类文本
            </summary>
            <param name="src">输入的文本</param>
            <returns>格式化后的文本</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.OutputEncode(System.String,System.Int32)">
            <summary>
            把经过安全过滤的客户端内容还原
            </summary>
            <param name="src">要还原的内容</param>
            <param name="type">0：Text，1：TitleText，2：Url</param>
            <returns>还原后的内容，可以直接显示到前端输入框中</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.WapEncode(System.String)">
            <summary>
            WAP编码
            </summary>
            <param name="src">要格式化的字符串</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.WapDecode(System.String)">
            <summary>
            WAP解编
            </summary>
            <param name="src">要格式化的字符串</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Md5(System.String)">
            <summary>
            32位MD5加密
            </summary>
            <param name="src">待加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Md516(System.String)">
            <summary>
            16位MD5加密
            </summary>
            <param name="src">待加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.SHA1(System.String)">
            <summary>
            SHA1加密
            </summary>
            <param name="src">待加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetMD5Hash(System.String)">
            <summary>
            获取指定字符串的MD5合法校验哈希值
            </summary>
            <param name="src">待加密的字符串</param>
            <returns>字符串的MD5合法校验哈希值</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetMD5Hash(System.String,System.String)">
            <summary>
            获取指定字符串的MD5合法校验哈希值
            </summary>
            <param name="src">待加密的字符串</param>
            <param name="key">加密密钥</param>
            <returns>字符串的MD5合法校验哈希值</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetMD5HashFromFile(System.String)">
            <summary>
            获取文件MD5哈希值
            </summary>
            <param name="fileName">文件的物理路径</param>
            <returns>文件的MD5哈希值</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.UrlEncode(System.String)">
            <summary>
            UrlEncode编码
            </summary>
            <param name="srcText">待编码的文本</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            UrlEncode编码
            </summary>
            <param name="srcText">待编码的文本</param>
            <param name="encoding">字符编码</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.UrlDecode(System.String)">
            <summary>
            UrlDecode解码
            </summary>
            <param name="srcText">待解码的文本</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            UrlDecode解码
            </summary>
            <param name="srcText">待解码的文本</param>
            <param name="encoding">字符编码</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.EnUnicode(System.String)">
            <summary>
            UrlEncode编码
            </summary>
            <param name="srcText">待编码的文本</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DeUnicode(System.String)">
            <summary>
            Unicode解码
            </summary>
            <param name="srcText">待解码的文本</param>
            <returns>returns</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.FormatBankCard(System.String)">
            <summary>
            格式化银行卡号（输入：6236682280000938，输出格式：6236 6822 8000 0938）
            </summary>
            <param name="BankCard">要格式化的银行卡号</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.FormatFileSize(System.Int64)">
            <summary>
            文件大小格式化显示
            </summary>
            <param name="fSize">文件大小，Byte为单位</param>
            <returns>格式化后的文件大小</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.CheckMaxLen(System.String,System.Int32)">
            <summary>
            判断字符串是否在指定长度以内（一个中文算2个长度）
            </summary>
            <param name="str">要判断的字符串</param>
            <param name="maxLength">最大长度</param>
            <returns>如果在指定最大长度以内，则返回true，否则false</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetStr(System.String,System.Int32,System.String)">
            <summary>
            截取指定长度的字符（一个中文算2个长度）
            </summary>
            <param name="text">要截取的字符</param>
            <param name="length">要截取的长度（包含字符被截断时的后缀长度）</param>
            <param name="suffix">当字符被截断时，要输出的后缀</param>
            <returns>截取到的字符</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetTextLength(System.String)">
            <summary>  
            计算文本长度，区分中英文字符，中文算两个长度，英文算一个长度
            </summary>
            <param name="text">需计算长度的字符串</param>
            <returns>int</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ToUTF8(System.String)">
            <summary>
            将一个字符串转换成一个UTF-8编码的字符串
            </summary>
            <param name="str">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Reverse(System.String)">
            <summary>
            字符串反转
            </summary>
            <param name="text">要反转的字符串</param>
            <returns>反转后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Base64Encode(System.String)">
            <summary>
            BASE64编码（UTF-8）
            </summary>
            <param name="text">待编码的内容</param>
            <returns>编码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Base64Decode(System.String)">
            <summary>
            BASE64解码（UTF-8）
            </summary>
            <param name="base64Text">待解码的内容</param>
            <returns>解码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.URLSafeBase64Encode(System.String)">
            <summary>
            URL安全的Base64编码
            </summary>
            <param name="text">待编码的内容</param>
            <returns>编码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.URLSafeBase64Decode(System.String)">
            <summary>
            URL安全的Base64解码
            </summary>
            <param name="UrlBase64">待解码的内容</param>
            <returns>解码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ToDateTimeString(System.Object,_51Sole.DJG.Common.DateTimeFormat,System.String)">
            <summary>
            DateTime类型转换为日期字符串（当o为null或DBNull时，返回默认值）
            </summary>
            <param name="o"></param>
            <param name="dateTimeFormat">格式</param>
            <param name="defaultValue">当o为null或DBNull时，要返回默认值</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ToDate(System.Object)">
            <summary>
            转为短日期
            </summary>
            <param name="o">要转换的日期对象</param>
            <returns>yyyy-MM-dd 或 ""</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ToDate(System.Object,System.String)">
            <summary>
            转为短日期
            </summary>
            <param name="o">要转换的日期对象</param>
            <param name="defaultValue">默认值</param>
            <returns>yyyy-MM-dd 或 defaultValue</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ToDateTime(System.Object)">
            <summary>
            转为短日期时间
            </summary>
            <param name="o">要转换的日期对象</param>
            <returns>yyyy-MM-dd HH:mm:ss 或 ""</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ToDateTime(System.Object,System.String)">
            <summary>
            转为短日期时间
            </summary>
            <param name="o">要转换的日期对象</param>
            <param name="defaultValue">默认值</param>
            <returns>yyyy-MM-dd HH:mm:ss 或 defaultValue</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IsNumeric(System.String)">
            <summary>
            判断是否为数字
            </summary>
            <param name="str">要判断的数据</param>
            <returns>真假结果</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IsPhone(System.String,System.Int32)">
            <summary>
            判断是否是正确的电话号码
            </summary>
            <param name="phone">要验证的号码</param>
            <param name="checkType">验证类型，0 固定电话和手机号码,1 固定电话,2 手机号码</param>
            <returns>如果是合法号码，就返回true，否则返回false</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IsMobile(System.String)">
            <summary>
            判断一个号码是不是合法的手机号码
            </summary>
            <param name="mobile">待判断的号码</param>
            <returns>true 是手机号码，false 不是手机号码</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IsEmail(System.String)">
            <summary>
            判断一个字符串是否是一个合法的Email地址
            </summary>
            <param name="email">待判断的Email地址</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IsUrl(System.String)">
            <summary>
            判断一个字符串是否是一个合法的Url
            </summary>
            <param name="url">待判断的Url地址</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IsIPAddress(System.String)">
            <summary>
            判断是否是IP地址格式 0.0.0.0
            </summary>
            <param name="ip">待判断的IP地址</param>
            <returns>true or false</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.SysTrim(System.String)">
            <summary>
            去除前后半角空格、Tab和换行符
            </summary>
            <param name="src">要处理的字符串</param>
            <returns>经过处理后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Trim(System.String)">
            <summary>
            去除前后空格、换行符
            </summary>
            <param name="src">要处理的字符串</param>
            <returns>经过处理后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DropScript(System.String)">
            <summary>
            清除所有脚本内容块
            </summary>
            <param name="src">要处理的字符串</param>
            <returns>经过处理后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DropIframe(System.String)">
            <summary>
            清除所有iframe内容块
            </summary>
            <param name="src">要处理的字符串</param>
            <returns>经过处理后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.TextFromHtml(System.String)">
            <summary>
            从HTML中获取文本,保留br,p,img
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DropHtml(System.String)">
            <summary>
            清除所有HTML标签
            </summary>
            <param name="src">要处理的字符串</param>
            <returns>经过处理后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DropHtmlTag(System.String,System.String)">
            <summary>
            去掉HTML内容中的指定的HTML标签
            </summary>
            <param name="src">HTML内容</param>
            <param name="tagName">要清除的HTML标签</param>
            <returns>去掉指定标签的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ZipHtml(System.String)">
            <summary>
            压缩HTML
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetCatchMsg(System.String,System.String)">
            <summary>
            格式化数据库错误提示信息
            </summary>
            <param name="sErrMsg">数据库操作的错误信息</param>
            <param name="sDefault">默认错误提示</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetPageDataSet(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            取得一个分页数据集
            </summary>
            <param name="connStr">数据库连接字符串</param>
            <param name="fields">要查询的字段</param>
            <param name="keyField">主键字段</param>
            <param name="table">要查询的表</param>
            <param name="where">要查询的条件</param>
            <param name="order">排序（如："ID DESC"）</param>
            <param name="pageSize">每页读取条数</param>
            <param name="pageIndex">当前查询的页码</param>
            <param name="total">返回总记录条数</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetUrlParam(System.String)">
            <summary>
            取得当前Url
            </summary>
            <param name="NPList">要排除的Url参数（格式如：,page,sid,）</param>
            <returns>当前页面的Url及参数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetCurrentUrl(System.String,System.Boolean)">
            <summary>
            取得当前Url
            </summary>
            <param name="NPList">要排除的Url参数（格式如：,page,sid,）</param>
            <param name="FullUrl">是否返回完整的Url（即返回的Url是否带上域名）</param>
            <returns>当前页面的Url及参数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetCurrentUrl(System.String,System.Boolean,System.Boolean)">
            <summary>
            取得当前Url
            </summary>
            <param name="NPList">要排除的Url参数（格式如：,page,sid,）</param>
            <param name="FullUrl">是否返回完整的Url（即返回的Url是否带上域名）</param>
            <param name="ForLink">返回的参数连接符是否转义为&amp;表示</param>
            <returns>当前页面的Url及参数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetCurrentUrl(System.Boolean)">
            <summary>
            取得当前页面的完整地址
            </summary>
            <param name="withParam">是否包含Url参数</param>
            <returns>取得当前页面的完整地址</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ToLinkUrl(System.String)">
            <summary>
            <![CDATA[将普通Url转换成用于超链接的Url（即将Url中的&转义成&amp;）]]>
            </summary>
            <param name="Url">要转换的Url</param>
            <returns>用于超链接的Url</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetShopUrl(System.String,System.Int32)">
            <summary>
            取得用户商铺地址的Url前缀（需要配置名为ShopBaseDomain的AppSetting，值如：http://e.51sole.com）
            </summary>
            <param name="AccountName">用户名</param>
            <param name="DomainType">Account表的DomainType</param>
            <returns>返回格式如：http://AccountName.51sole.com/ </returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetShopUrl(System.String,System.String)">
            <summary>
            取得用户商铺地址的Url前缀（需要配置名为ShopBaseDomain的AppSetting，值如：http://e.51sole.com）
            </summary>
            <param name="ConnectionString">DeployDB库的链接字符串</param>
            <param name="AccountName">用户名</param>
            <returns>返回格式如：http://AccountName.51sole.com/ </returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetQueryString(System.String,System.String)">
            <summary>
            获取url字符串参数，返回参数值字符串
            </summary>
            <param name="name">参数名称</param>
            <param name="url">url字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.URLSafeEncode(System.String)">
            <summary>
            对URL参数值的特殊字符+/=进行安全转码，以防传输过程中丢失
            </summary>
            <param name="text">待编码的内容</param>
            <returns>编码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.URLSafeDecode(System.String)">
            <summary>
            解码对URL参数值的特殊字符+/=进行安全转码
            </summary>
            <param name="text">待解码的内容</param>
            <returns>解码后的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Print(System.String)">
            <summary>
            在页面上输出指定的字符内容
            </summary>
            <param name="text">要输出的内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Println(System.String)">
            <summary>
            在页面上输出指定的字符内容并换行
            </summary>
            <param name="text">要输出的内容</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Println(System.String,System.Boolean)">
            <summary>
            在页面上输出指定的字符内容并换行
            </summary>
            <param name="text">要输出的内容</param>
            <param name="withBR">行尾是否输出<br/></param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetConnectionString(System.String)">
            <summary>
            获取ConnectionStrings配置节中的值
            </summary>
            <param name="name">连接字符串名称</param>
            <returns>连接字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.SetConnectionStringValue(System.String,System.String)">
            <summary>
            设置ConnectionStrings配置节的值
            </summary>
            <param name="name">连接字符串名称</param>
            <param name="connectionString">连接字符串</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.SetConnectionStringValue(System.String,System.String,System.Boolean)">
            <summary>
            设置ConnectionStrings配置节的值
            </summary>
            <param name="name">连接字符串名称</param>
            <param name="connectionString">连接字符串</param>
            <param name="writeLog">当操作出错时，是否输出错误日志</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetAppSettingsKeyValue(System.String)">
            <summary>
            获取AppSettings配置节中的Key值
            </summary>
            <param name="keyName">key的名称</param>
            <returns>key的值</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.SetAppSettingsKeyValue(System.String,System.String)">
            <summary>
            设置AppSettings配置节中的Key值
            </summary>
            <param name="keyName">要设置的Key</param>
            <param name="keyValue">要设置的值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.SetAppSettingsKeyValue(System.String,System.String,System.Boolean)">
            <summary>
            设置AppSettings配置节中的Key值
            </summary>
            <param name="keyName">要设置的Key</param>
            <param name="keyValue">要设置的值</param>
            <param name="writeLog">当出错时，是否输出错误日志</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetIndustryName(System.String)">
            <summary>
            去掉行业名称中括号部分的内容
            </summary>
            <param name="IndustryName">要处理的行业名称</param>
            <returns>不含括号中内容的行业名称</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IDsIsNumber(System.String)">
            <summary>
            判断一个ID集合是否合法
            </summary>
            <param name="IDs"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.SafeIDs(System.String)">
            <summary>
            ID集合安全过滤
            </summary>
            <param name="IDs"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.HighLightString(System.String,System.String)">
            <summary>
            将字符串中的关键词做高亮处理
            </summary>
            <param name="str">要处理的字符串</param>
            <param name="keywords">要高亮的关键词，多个关键词之间用英文逗号隔开</param>
            <returns>高亮处理后的字符串</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.ToCNMoney(System.String)">
            <summary>
            金额转换成中文大写金额
            </summary>
            <param name="LowerMoney">eg:10.74</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Week">
            <summary>
            取得今天是星期几
            </summary>
            <returns>如：星期一</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DayTime(System.Boolean)">
            <summary>
            取得当前时段（凌晨、早上、上午、中午、下午、傍晚、晚上）
            </summary>
            <param name="APEOlny">是否仅分为上午、下午和晚上三个时间段</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            取得两个日期之间相隔的天数
            </summary>
            <param name="dateStart">开始日期</param>
            <param name="dateEnd">结束日期</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DateDiffStr(System.DateTime,System.DateTime)">
            <summary>
            取得两个日期之间相隔的天数小时数分钟数
            </summary>
            <param name="dateStart">开始日期</param>
            <param name="dateEnd">结束日期</param>
            <returns>x天x小时x分</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.DateDiffMinute(System.DateTime,System.DateTime)">
            <summary>
            取得两个日期之间相隔的总分钟数
            </summary>
            <param name="dateStart">开始日期</param>
            <param name="dateEnd">结束日期</param>
            <returns>相差的总分钟数</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.FormatMinute(System.Int32)">
            <summary>
            把分钟数格式化成“x天x小时x分”形式的字符串
            </summary>
            <param name="minute">分钟数</param>
            <returns>x天x小时x分</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.RedirectMobile(System.String)">
            <summary>
            如果访问来源是移动终端，则302重定向到指定的移动站Url
            </summary>
            <param name="mobileUrl">要跳转到的移动站Url</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IsFromMobile">
            <summary>
            判断访问来源是否是移动终端
            </summary>
            <returns>如果是移动终端，则返回true，否则返回false</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.SetPageNoCache">
            <summary>
            设置页面不被缓存
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetWebRequest(System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以GET方式请求一个网页，返回网页的HTML源码
            </summary>
            <param name="url">要请求的网页地址</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的网页HTML源码</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetWebRequest(System.String,System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以GET方式请求一个网页，返回网页的HTML源码
            </summary>
            <param name="url">要请求的网页地址</param>
            <param name="userAgent">UserAgent的内容</param>
            <param name="referer">Referer的内容</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的网页HTML源码</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.PostWebRequest(System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="postData">要提交的数据</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.PostWebRequest(System.String,System.String,System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="postData">要提交的数据</param>
            <param name="userAgent">UserAgent的内容</param>
            <param name="referer">Referer的内容</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.PostJSON(System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交JSON数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="json">要提交的JSON数据</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.PostJSON(System.String,System.String,System.Collections.Hashtable,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交JSON数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="json">要提交的JSON数据</param>
            <param name="headers">要附带的其它Header项集合</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.PostJSON(System.String,System.String,System.String,System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交JSON数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="json">要提交的JSON数据</param>
            <param name="userAgent">UserAgent的内容</param>
            <param name="referer">Referer的内容</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.PostJSON(System.String,System.String,System.String,System.String,System.Collections.Hashtable,System.Text.Encoding,System.Int32@)">
            <summary>
            以POST方式提交JSON数据给接口
            </summary>
            <param name="url">接口地址</param>
            <param name="json">要提交的JSON数据</param>
            <param name="userAgent">UserAgent的内容</param>
            <param name="referer">Referer的内容</param>
            <param name="headers">要附带的其它Header项集合</param>
            <param name="encoding">字符编码</param>
            <param name="httpStatusCode">返回的状态码</param>
            <returns>返回的内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetPostJSON">
            <summary>
            获取POST方式提交上来的JSON数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Intercept(System.String)">
            <summary>
            恶意访问拦截（默认拦截空的UA请求）
            </summary>
            <param name="connStr">DeployDB数据库的连接字符串</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Intercept(System.String,System.Boolean)">
            <summary>
            恶意访问拦截
            </summary>
            <param name="connStr">DeployDB数据库的连接字符串</param>
            <param name="BanNullUA">是否拦截空的UA</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.Intercept(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            恶意访问拦截
            </summary>
            <param name="sConnString">拦截日志数据库连接字符串</param>
            <param name="BanIP">是否拦截IP（1为拦截，0为不拦截）</param>
            <param name="BanCount">拦截频率</param>
            <param name="UnBanSecond">自动解锁频率</param>
            <param name="BanUA">是否拦截UA（1为拦截，0为不拦截）</param>
            <param name="BanUAList">UA列表，多个UA特征码之间用$隔开</param>
            <param name="ExactBanUAList">精准匹配的UA列表，多个UA之间用∫隔开</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.InterceptA(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String[])">
            <summary>
            恶意访问拦截
            </summary>
            <param name="sConnString">拦截日志数据库连接字符串</param>
            <param name="BanIP">是否拦截IP（1为拦截，0为不拦截）</param>
            <param name="BanCount">拦截频率</param>
            <param name="UnBanSecond">自动解锁频率</param>
            <param name="BanUA">是否拦截UA（1为拦截，0为不拦截）</param>
            <param name="BanUAList">UA列表，多个UA特征码之间用$隔开</param>
            <param name="arrExactBanUAList">精准匹配的UA数组</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            绑定一个DropDownList数据
            </summary>
            <param name="ddl">要绑定数据的DropDownList对象</param>
            <param name="dataValueField">绑定到DropDownList的DataValueField</param>
            <param name="dataTextField">绑定到DropDownList的DataTextField</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="tableName">数据源表名</param>
            <param name="where">数据源查询条件,如："SortID=8"</param>
            <param name="order">数据源排序，如："ID ASC"</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            绑定一个DropDownList数据
            </summary>
            <param name="ddl">要绑定数据的DropDownList对象</param>
            <param name="dataValueField">绑定到DropDownList的DataValueField</param>
            <param name="dataTextField">绑定到DropDownList的DataTextField</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="tableName">数据源表名</param>
            <param name="where">数据源查询条件,如："SortID=8"</param>
            <param name="order">数据源排序，如："ID ASC"</param>
            <param name="clearBracket">是否清除名称中的括号部分内容（针对搜了网行业名称的处理）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            绑定一个DropDownList数据
            </summary>
            <param name="ddl">要绑定数据的DropDownList对象</param>
            <param name="dataValueField">绑定到DropDownList的DataValueField</param>
            <param name="dataTextField">绑定到DropDownList的DataTextField</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="tableName">数据源表名</param>
            <param name="where">数据源查询条件,如："SortID=8"</param>
            <param name="order">数据源排序，如："ID ASC"</param>
            <param name="clearBracket">是否清除名称中的括号部分内容（针对搜了网行业名称的处理）</param>
            <param name="appendOptionText">附加选项的文本（默认做为列表的第一个选项）</param>
            <param name="appendOptionValue">附加选项的值</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String,System.String,System.String)">
            <summary>
            绑定一个DropDownList数据
            </summary>
            <param name="ddl">要绑定数据的DropDownList对象</param>
            <param name="dataTextField">绑定到DropDownList的DataTextField</param>
            <param name="dataValueField">绑定到DropDownList的DataValueField</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="sql">查询语句</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            绑定一个DropDownList数据
            </summary>
            <param name="ddl">要绑定数据的DropDownList对象</param>
            <param name="dataTextField">绑定到DropDownList的DataTextField</param>
            <param name="dataValueField">绑定到DropDownList的DataValueField</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="sql">查询语句</param>
            <param name="clearBracket">是否清除名称中的括号部分内容（针对搜了网行业名称的处理）</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            绑定一个DropDownList数据
            </summary>
            <param name="ddl">要绑定数据的DropDownList对象</param>
            <param name="dataTextField">绑定到DropDownList的DataTextField</param>
            <param name="dataValueField">绑定到DropDownList的DataValueField</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="sql">查询语句</param>
            <param name="clearBracket">是否清除名称中的括号部分内容（针对搜了网行业名称的处理）</param>
            <param name="appendOptionText">附加选项的文本（默认做为列表的第一个选项）</param>
            <param name="appendOptionValue">附加选项的值</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.BindRepeater(System.Web.UI.WebControls.Repeater,System.String,System.String)">
            <summary>
            绑定Repeater数据
            </summary>
            <param name="rep">Repeater对象</param>
            <param name="connStr">数据库连接字符串</param>
            <param name="sql">查询语句</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.BindRepeater(System.Web.UI.WebControls.Repeater,System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            绑定Repeater数据
            </summary>
            <param name="rep">Repeater对象</param>
            <param name="connStr">数据库连接字符串</param>
            <param name="sql">查询语句</param>
            <param name="ps">查询参数集</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.BindRepeater(System.Web.UI.WebControls.Repeater,System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            绑定Repeater数据
            </summary>
            <param name="rep">Repeater对象</param>
            <param name="conn">数据库连接对象</param>
            <param name="sql">查询语句</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.BindRepeater(System.Web.UI.WebControls.Repeater,System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            绑定Repeater数据
            </summary>
            <param name="rep">Repeater对象</param>
            <param name="conn">数据库连接对象</param>
            <param name="sql">查询语句</param>
            <param name="ps">查询参数集</param>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.AD(System.String,System.Int32)">
            <summary>
            取得指定广告位的广告内容
            </summary>
            <param name="connStr">数据库连接字符串（DeployDB_EX库）</param>
            <param name="AdID">广告位ID</param>
            <returns>广告位对应的广告内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.AD(System.String,System.Int32,System.Int32)">
            <summary>
            取得指定广告位的广告内容
            </summary>
            <param name="connStr">数据库连接字符串（DeployDB_EX库）</param>
            <param name="AdID">广告位ID</param>
            <param name="AdCount">要显示的广告条数（按广告显示顺序取前AdCount条），AdCount的值小于0时将显示所有广告</param>
            <returns>广告位对应的广告内容</returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.NewToken">
            <summary>
            生成一个新的Token
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GenerateStringID">
            <summary>
            生成一个16位长度的唯一字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GenerateIntID">
            <summary>
            生成一个19位长度的唯一数字序列
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GenerateTimeID">
            <summary>
            生成一个18长度的时间戳字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GenerateOrderID">
            <summary>
            生成一个18长度的订单号
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GenerateOrderID(System.String)">
            <summary>
            生成一个18长度的订单号
            </summary>
            <param name="prefix">前缀，支持最多3个字符</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GenerateOrderID(System.DateTime@)">
            <summary>
            生成一个18长度的订单号
            </summary>
            <param name="dateTime">和订单号一致的时间</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GenerateOrderID(System.String,System.DateTime@)">
            <summary>
            生成一个18长度的订单号
            </summary>
            <param name="prefix">前缀，支持最多3个字符</param>
            <param name="dateTime">和订单号一致的时间</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetRandomString(System.Int32,System.Int32)">
            <summary>
            生成指定长度的随机字符串
            </summary>
            <param name="num">要生成的字符串长度</param>
            <param name="type">类型（1：数字，2：大写字母，3：小字字母，4：数字/大写字母，5：数字/小写字母，6：大小写字母，7：数字/大小写字母+特殊字符，其它：数字/大小写字母）</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IP">
            <summary>
            取得客户端真实IP。如果有代理则取第一个非内网地址
            </summary>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetLocalIP">
            <summary>
            取当前电脑的IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IPFrom(System.String)">
            <summary>
            取得IP来源地
            </summary>
            <param name="ipFilePath">DATX数据库的文件地址</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IPFrom(System.String,System.String)">
            <summary>
            取得IP来源地
            </summary>
            <param name="ip">IP地址</param>
            <param name="ipFilePath">DATX数据库的文件地址</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IPFrom(System.String,System.String@)">
            <summary>
            取得IP来源地址（基于百度IP查询接口）
            </summary>
            <param name="ip">要查询的IP地址，为空时将自动获取当前用户IP地址</param>
            <param name="queryIP">输出被查询的IP地址</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.GetEnumDescription(System.Enum)">
            <summary>
            取得枚举值的Description
            </summary>
            <param name="value">枚举对象，例如：ContentTypes.TextPlain</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.Common.Utility.IsFromARR(System.String)">
            <summary>
            ARR标识校验
            </summary>
            <param name="ARRKey">ARR标识值</param>
            <returns>如果校验通过，返回true，否则返回false</returns>
        </member>
        <member name="T:_51Sole.DJG.Common.DateTimeFormat">
            <summary>
            日期字符串格式
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.DateTimeFormat.DATE">
            <summary>
            减号分隔仅日期，如：2018-01-16
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.DateTimeFormat.DATETIME">
            <summary>
            减号分隔带时间，如：2018-01-16 16:36:01
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.DateTimeFormat.SHORTDATETIME">
            <summary>
            减号分隔带时间，如：2018-01-16 16:36
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.DateTimeFormat.CNDATE">
            <summary>
            中文仅日期，如：2018年01月16日
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.DateTimeFormat.CNDATETIME">
            <summary>
            中文带时间，如：2018年01月16日 16时36分01秒
            </summary>
        </member>
        <member name="F:_51Sole.DJG.Common.DateTimeFormat.SHORTCNDATETIME">
            <summary>
            中文带时间，如：2018年01月16日 16时36分
            </summary>
        </member>
        <member name="M:_51Sole.DJG.DeployManage.ChkDeleteRoot">
            <summary>
            删除权限校验
            </summary>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.DeployManage.Log404(System.String,System.String,System.String)">
            <summary>
            记录页面404
            </summary>
            <param name="sConnString">数据库连接字符串</param>
            <param name="sWebUrl">出现404的网页地址</param>
            <param name="sRemark">出现404的原因描述</param>
        </member>
        <member name="M:_51Sole.DJG.DeployManage.Log404(System.Data.SqlClient.SqlConnection,System.String,System.String)">
            <summary>
            记录页面404
            </summary>
            <param name="conn">数据库连接对象</param>
            <param name="sWebUrl">出现404的网页地址</param>
            <param name="sRemark">出现404的原因描述</param>
        </member>
        <member name="M:_51Sole.DJG.DeployManage.AddSMSLog(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            写短信发送日志
            </summary>
            <param name="DeployDBConnectionString">DeployDB库的连接字符串</param>
            <param name="MobilePhone">手机号</param>
            <param name="MessageContent">短信内容</param>
            <param name="Sender">短信接口</param>
            <param name="Page">发送短信的页面描述（如：用户后台手机登录UserHandler.ashx[GetSMS()]）</param>
            <param name="SMSCode">验证码</param>
            <param name="MessageType">来源（0 搜脉APP，1 WEB搜脉聊天，2 搜脉下载，10 用户后台手机号登录，11 搜了网用户注册，12 电缆网用户注册，13 电缆网账户维护，14 SEO客户短信，15 O2O用户注册，16 随你淘绑定小程序，17 用户后台手机认证，18 随你淘业务短信，19 营销短信，20 搜了网代理商消费通知，21 搜了网业务短信）</param>
        </member>
        <member name="M:_51Sole.DJG.DeployManage.IPToLong(System.String)">
            <summary>
             将字符串形式的IP转换为long
            </summary>
            <param name="strIP"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.DeployManage.ChkIP(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
             恶意访问拦截
            </summary>
            <param name="sConnString">拦截日志数据库连接字符串</param>
            <param name="BanCount">拦截频率</param>
            <param name="UnBanSecond">自动解锁频率</param>
            <param name="BanUA">是否拦截UA（1为拦截，0为不拦截）</param>
            <param name="BanUAList">UA特征码列表，多个UA特征码之间用$隔开</param>
        </member>
        <member name="M:_51Sole.DJG.DeployManage.ChkIP(System.String,System.Int32,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
             恶意访问拦截
            </summary>
            <param name="sConnString">拦截日志数据库连接字符串</param>
            <param name="BanCount">拦截频率</param>
            <param name="UnBanSecond">自动解锁频率</param>
            <param name="BanUA">是否拦截UA（1为拦截，0为不拦截）</param>
            <param name="BanUAList">UA特征码列表，多个UA特征码之间用$隔开</param>
            <param name="ExactBanUAList">精准匹配的UA列表，多个UA之间用∫隔开</param>
        </member>
        <member name="M:_51Sole.DJG.DeployManage.ChkIPA(System.String,System.Int32,System.Int32,System.Boolean,System.String,System.String[])">
            <summary>
             恶意访问拦截
            </summary>
            <param name="sConnString">拦截日志数据库连接字符串</param>
            <param name="BanCount">拦截频率</param>
            <param name="UnBanSecond">自动解锁频率</param>
            <param name="BanUA">是否拦截UA（1为拦截，0为不拦截）</param>
            <param name="BanUAList">UA特征码列表，多个UA特征码之间用$隔开</param>
            <param name="arrExactBanUAList">精准匹配的UA数组</param>
        </member>
        <member name="M:_51Sole.DJG.DeployManage.ChkUA(System.String,System.String,System.String)">
            <summary>
            UA拦截
            </summary>
            <param name="sConnString">拦截日志数据库连接字符串</param>
            <param name="BanUAList">UA包含的特征码列表，多个UA特征码之间用$隔开</param>
            <param name="ExactBanUAList">精准匹配的UA列表，多个UA之间用∫隔开</param>
        </member>
        <member name="M:_51Sole.DJG.DeployManage.ChkUA(System.String,System.String,System.String[])">
            <summary>
            UA拦截
            </summary>
            <param name="sConnString">拦截日志数据库连接字符串</param>
            <param name="BanUAList">UA包含的特征码列表，多个UA特征码之间用$隔开</param>
            <param name="arrExactBanUAList">精准匹配的UA数组</param>
        </member>
        <member name="M:_51Sole.DJG.DeployManage.CheckUA(System.String,System.String[])">
            <summary>
            UA拦截过程
            </summary>
            <param name="BanUAList">模糊匹配的UA关键词列表，多个关键词之间用$隔开</param>
            <param name="arrExactBanUAList">精准匹配的UA数组</param>
        </member>
        <member name="M:_51Sole.DJG.DeployManage.IsWhiteIP(System.String,System.String)">
            <summary>
            判断一个IP地址是否在拦截IP白名单里
            </summary>
            <param name="sConnString">DeployDB连接字符串</param>
            <param name="IP">要判断的IP地址</param>
            <returns>true代表在白名单里，false代表不在白名单中</returns>
        </member>
        <member name="M:_51Sole.DJG.User.IP">
            <summary>
            取得客户端真实IP。如果有代理则取第一个非内网地址
            </summary>
        </member>
        <member name="M:_51Sole.DJG.User.IsBindMobileUser(System.String,System.Int32)">
            <summary>
            是否是手机认证过的用户
            </summary>
            <param name="connstr"></param>
            <param name="AccountID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.IsSimpleGrant(System.String,System.Int32,System.Int32)">
            <summary>
            判断用户是否有开某种特殊服务
            </summary>
            <param name="connstr"></param>
            <param name="GrantTypeID"></param>
            <param name="AccountID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.IsSimpleGrant(System.Data.SqlClient.SqlConnection,System.Int32,System.Int32)">
            <summary>
            判断用户是否有开某种特殊服务
            </summary>
            <param name="conn"></param>
            <param name="GrantTypeID"></param>
            <param name="AccountID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.IsGrant(System.String,System.Int32)">
            <summary>
            判断用户是否是收费会员
            </summary>
            <param name="connstr"></param>
            <param name="AccountID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.IsGrant(System.Data.SqlClient.SqlConnection,System.Int32)">
            <summary>
            判断用户是否是收费会员
            </summary>
            <param name="conn"></param>
            <param name="AccountID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.CheckIsGrant(System.String,System.Int32)">
            <summary>
            用于搜了网用户后台判断用户是否有权限使用会员专用的页面
            会自动转到过期提示页面或无权限使用的提示页
            由于现在可以同时开通多个服务，已不再建议使用！！！
            </summary>
            <param name="connstr"></param>
            <param name="AccountID"></param>
        </member>
        <member name="M:_51Sole.DJG.User.CheckIsGrant(System.Data.SqlClient.SqlConnection,System.Int32)">
            <summary>
            用于搜了网用户后台判断用户是否有权限使用会员专用的页面
            会自动转到过期提示页面或无权限使用的提示页
            由于现在可以同时开通多个服务，已不再建议使用！！！
            </summary>
            <param name="conn"></param>
            <param name="AccountID"></param>
        </member>
        <member name="M:_51Sole.DJG.User.CheckIsGrantByRoleID(System.String,System.Int32,System.Int32)">
            <summary>
            判断用户是否开通了某个指定的会员套餐
            会自动转到过期提示页或无权限提示页
            </summary>
            <param name="connstr"></param>
            <param name="AccountID"></param>
            <param name="RoleID"></param>
        </member>
        <member name="M:_51Sole.DJG.User.CheckIsGrantByRoleID(System.Data.SqlClient.SqlConnection,System.Int32,System.Int32)">
            <summary>
            判断用户是否开通了某个指定的会员套餐
            会自动转到过期提示页或无权限提示页
            </summary>
            <param name="conn"></param>
            <param name="AccountID"></param>
            <param name="RoleID"></param>
        </member>
        <member name="M:_51Sole.DJG.User.IsGrantByRoleID(System.String,System.Int32,System.Int32)">
            <summary>
            判断用户是否开通了某个指定的会员套餐
            </summary>
            <param name="connstr"></param>
            <param name="AccountID"></param>
            <param name="RoleID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.IsGrantByRoleID(System.Data.SqlClient.SqlConnection,System.Int32,System.Int32)">
            <summary>
            判断用户是否开通了某个指定的会员套餐
            </summary>
            <param name="conn"></param>
            <param name="AccountID"></param>
            <param name="RoleID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.GetRoleActionValue(System.String,System.Int32,System.Int32)">
            <summary>
            取得某个服务套餐某个权限设置的值
            </summary>
            <param name="connstr"></param>
            <param name="RoleID"></param>
            <param name="ActionID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.GetRoleActionValue(System.Data.SqlClient.SqlConnection,System.Int32,System.Int32)">
            <summary>
            取得某个服务套餐某个权限设置的值
            </summary>
            <param name="conn"></param>
            <param name="RoleID"></param>
            <param name="ActionID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.GetUserGrant(System.String,System.Int32,System.Int32)">
            <summary>
            该方法已过时作废，不再建议使用！否则当同时有多条开通记录生效时，返回数据将不准确
            请使用新的方法：GetUserGrant(string connstr, int AccountID, int RoleID, int ActionID)
            </summary>
            <param name="connstr"></param>
            <param name="AccountID"></param>
            <param name="ActionID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.GetUserGrant(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            判断用户是否是指定会员服务的有效期会员
            </summary>
            <param name="connstr"></param>
            <param name="AccountID"></param>
            <param name="RoleID">服务ID</param>
            <param name="ActionID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.GetUserGrant(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            判断用户是否是指定会员服务的有效期会员
            </summary>
            <param name="connstr"></param>
            <param name="AccountID"></param>
            <param name="RoleIDs">要校验的会员服务ID列表，多个ID之间用英文逗号隔开（如：10,15,25）</param>
            <param name="ActionID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.GetUserGrant(System.Data.SqlClient.SqlConnection,System.Int32,System.Int32)">
            <summary>
            该方法已过时作废，不再建议使用！否则当同时有多条开通记录生效时，返回数据将不准确
            请使用新的方法：GetUserGrant(SqlConnection conn, int AccountID, int RoleID, int ActionID)
            </summary>
            <param name="conn"></param>
            <param name="AccountID"></param>
            <param name="ActionID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.GetUserGrant(System.Data.SqlClient.SqlConnection,System.Int32,System.Int32,System.Int32)">
            <summary>
            判断用户是否是指定会员服务的有效期会员
            </summary>
            <param name="conn"></param>
            <param name="AccountID"></param>
            <param name="RoleID">服务ID</param>
            <param name="ActionID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.GetUserGrant(System.Data.SqlClient.SqlConnection,System.Int32,System.String,System.Int32)">
            <summary>
            判断用户是否是指定会员服务的有效期会员
            </summary>
            <param name="conn"></param>
            <param name="AccountID"></param>
            <param name="RoleIDs">要校验的会员服务ID列表，多个ID之间用英文逗号隔开（如：10,15,25）</param>
            <param name="ActionID"></param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.EncryptID(System.Int32)">
            <summary>
            加密一个数字型ID，主要用于加密AccountID
            </summary>
            <param name="ID">要加密的ID</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.DecryptID(System.String)">
            <summary>
            解密一个数字型ID，主要用于解密AccountID
            </summary>
            <param name="IDString">要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:_51Sole.DJG.User.GetAccountID">
            <summary>
            获取搜了网已登录用户的AccountID
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
